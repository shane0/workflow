{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about/","title":"about","text":"<ul> <li>cut through the bs</li> <li>evetually I'll make a screencast of how to use this </li> </ul>"},{"location":"about/#layout","title":"layout","text":"<pre><code>\u251c\u2500\u2500 docs &lt;-- mkdocs\n\u251c\u2500\u2500 includes &lt;-- snippets &amp; gloassary (mkdocs in the browser)\n\u251c\u2500\u2500 plugins &lt; command line automations\n\u2514\u2500\u2500 todocli &lt;-- task management files (works in command line and can be viewed in mkdocs)\n</code></pre> Example <pre><code>tree -d -L 1\n</code></pre>"},{"location":"about/#options","title":"options","text":"<ul> <li>these are not installed by default</li> </ul> <pre><code>more click plugins\ndocs readability measurement locally or remote on push and pull requests (lexi)\nmarkdownlint in editor, command line or remote pipelines\ngithub integrations for repos, actions and pages\nlocal or remote tests (includes examples in cucumber, python &amp; js)\nmore aliases and shell scripts\n</code></pre> <p>Info</p> <pre><code>- a no nonsense workflow centered on the power of simplicity &amp; ease of maintanence\n- using parts from:\n- git\n- linux standards\n- [data science template](https://github.com/patrickmineault/true-neutral-cookiecutter)\n- [readme (docs first) driven development](https://tom.preston-werner.com/2010/08/23/readme-driven-development.html)\n- [behavior (tests first) sdriven](https://cucumber.io/docs/cucumber/)\n- [gitlab style guide](https://colab.research.google.com/corgiredirector?site=https%3A%2F%2Fdocs.gitlab.com%2Fee%2Fdevelopment%2Fdocumentation%2Ftopic_types%2F)\n- &lt;https://www.writethedocs.org&gt;\n</code></pre> <p>Example</p> <pre><code>- project templates: [cookiecutter](https://github.com/cookiecutter/cookiecutter)\n- task tracking: [todocli](https://github.com/francoischalifour/todo-cli)\n- modular command line automation: [click](https://click.palletsprojects.com/en/8.1.x/)\n- powerful documentaiton: [mkdocs](https://squidfunk.github.io/mkdocs-material/)\n- measurable readability: [lexi](https://github.com/Rebilly/lexi)\n</code></pre>"},{"location":"alias/","title":"alias shortcuts","text":"<ul> <li>apps in this template have aliases documented on their mkdoc page</li> <li>click commands I add typically call an alias so they click is optional </li> </ul>","tags":["alias","click"]},{"location":"alias/#alias-workflow","title":"alias workflow","text":"<ul> <li>this seems obvious I'm surprised it's not included in .bashrc from day 1</li> <li>ea: edit alias file</li> <li>sa: updates aliases (sa = source alias)</li> </ul> <pre><code># manage aliases\nalias ea='vim ~/.bash_aliases'\nalias sa='source ~/.bashrc'\n</code></pre> <ul> <li>when editing aliases use: https://www.shellcheck.net/</li> </ul>","tags":["alias","click"]},{"location":"alias/#julian-date","title":"julian date","text":"<pre><code>alias day='date +%D &amp;&amp; date +%j &amp;&amp; date +%A &amp;&amp; date +%d &amp;&amp; date +%u'\nalias fday='mkdir \"$(date +%j)\" &amp;&amp; cd \"$(date +%j)\"'\nalias mday='vim ./\"$(date +%j)\".md'\nalias fj='vim ./\"$(date +%F)\".md'\nalias week='date +%V'\nalias month='date +%B &amp;&amp; date +%m'\nalias year='date +%Y'\n</code></pre>","tags":["alias","click"]},{"location":"behave/","title":"behave (cucumber tests)","text":"","tags":["test","cucumber","python"]},{"location":"behave/#gherkin-file","title":"gherkin file","text":"<ul> <li><code>features/file.feature</code></li> </ul> <pre><code>Feature: Verify log files\n    As a developer\n    I want to ensure the logs contain specific content\n    So that I can confirm the application is running correctly\n\n    Scenario Outline: Check log file &lt;filename&gt; for &lt;content&gt;\n        Given I have a log file named \"&lt;filename&gt;\"\n        When I check the file for \"&lt;content&gt;\"\n        Then the file should contain \"&lt;content&gt;\"\n\n        Examples:\n            | filename | content            |\n            | file1    | expected content 1 |\n            | file2    | expected content 2 |\n</code></pre>","tags":["test","cucumber","python"]},{"location":"behave/#locally","title":"locally","text":"<pre><code>behave\n</code></pre> <pre><code>Feature: Verify log files # features/file.feature:1\n  As a developer\n  I want to ensure the logs contain specific content\n  So that I can confirm the application is running correctly\n  Scenario Outline: Check log file file1 for expected content 1 -- @1.1   # features/file.feature:13\n    Given I have a log file named \"file1\"                                 # features/steps/file_steps.py:8\n    When I check the file for \"expected content 1\"                        # features/steps/file_steps.py:13\n    Then the file should contain \"expected content 1\"                     # features/steps/file_steps.py:19\n\n  Scenario Outline: Check log file file2 for expected content 2 -- @1.2   # features/file.feature:14\n    Given I have a log file named \"file2\"                                 # features/steps/file_steps.py:8\n    When I check the file for \"expected content 2\"                        # features/steps/file_steps.py:13\n    Then the file should contain \"expected content 2\"                     # features/steps/file_steps.py:19\n\n1 feature passed, 0 failed, 0 skipped\n2 scenarios passed, 0 failed, 0 skipped\n6 steps passed, 0 failed, 0 skipped, 0 undefined\nTook 0m0.002s\n</code></pre>","tags":["test","cucumber","python"]},{"location":"behave/#remotely","title":"remotely","text":"<ul> <li><code>.github/behave.yml</code></li> </ul> <pre><code>name: Run tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Setup Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.x'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n    - name: Run tests\n      env:\n        SKIP_TESTS: ${{ env.SKIP_TESTS }}\n      run: |\n        if [ -z \"$SKIP_TESTS\" ]; then\n          behave features/file.feature\n          # behave -c 1\n        else\n          echo \"Tests skipped due to SKIP_TESTS environment variable.\"\n        fi\n</code></pre>","tags":["test","cucumber","python"]},{"location":"cli/","title":"command line tools","text":""},{"location":"cli/#fuzzy-find","title":"fuzzy find","text":"<pre><code>cd\nfzf\n# start typing and magic happens\n</code></pre> <pre><code># fuzzy find then open\nalias v='vi $(fzf)'\n</code></pre>"},{"location":"click/","title":"click","text":"","tags":["click","update"]},{"location":"click/#alias","title":"alias","text":"<pre><code>alias cli='python cli.py'\n</code></pre>","tags":["click","update"]},{"location":"click/#screencast","title":"screencast","text":"","tags":["click","update"]},{"location":"click/#usage","title":"usage","text":"<ul> <li>click</li> <li>add your own plugins</li> <li>use this example: <code>plugings/bujo.py</code></li> </ul> <pre><code>Usage: cli.py bujo [OPTIONS] COMMAND [ARGS]...\n\n  bullet journaling &amp; todocli\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  day        week\n  dayfolder  create subfolder with named todays date\n  edit       edit plugin\n  folder     create bujo folder\n  future     bujo index file\n  index      bujo index file\n  m          mkdocs serve\n  month      month file\n  read       read a bujo/ file\n  remote     jobs on remotive\n  s          start dev server\n  snip       open snippet maker\n  todo       generic todo\n  week       week\n  ww         weather\n  year       week\n  zl         markdownlint\n</code></pre>","tags":["click","update"]},{"location":"click/#command-line","title":"command line","text":"<p>the command line is superior to the gui because it is more efficient, powerful, flexible, and versatile.</p> <ul> <li>efficiency: the command line does not have to render graphical elements, which makes it much faster than the gui.</li> <li>power: the command line gives users direct access to the underlying operating system and applications, which allows them to perform a wider range of tasks.</li> <li>flexibility: the command line can be used to interact with a wider range of systems and applications than the gui.</li> <li>versatility: the command line can be used for a wide variety of tasks, from system administration to software development.</li> <li>stability command line api interfaces are rarely broken by updates</li> </ul> <p>here are some specific examples of how the command line is more efficient, powerful, flexible, and versatile than the gui:</p> <ul> <li>efficiency: a system administrator can use the command line to quickly and easily check the status of all servers on a network, while using the gui would require opening multiple windows and clicking through various menus.</li> <li>power: a software developer can use the command line to compile and run code, while using the gui would require using a separate ide.</li> <li>flexibility: a user can use the command line to connect to a remote server, while using the gui would require a dedicated vpn client.</li> <li>versatility: a user can use the command line to automate tasks, create custom scripts, and manage files and directories, while using the gui would require using a variety of different tools.</li> </ul> <p>the command line is a more efficient, powerful, flexible, and versatile way to interact with computer systems than the gui.</p>","tags":["click","update"]},{"location":"comits/","title":"comits","text":"<ul> <li>the <code>./push.sh</code> script pushes changes to update your repository</li> <li>by calling the commit command <code>cz c</code> you will be prompted through a standard commit message eliminating human errors</li> <li>https://commitizen-tools.github.io/commitizen/</li> <li>commitizen can also update your changelog</li> </ul> <pre><code>pip install --user -U commitizen\n</code></pre>"},{"location":"comments/","title":"comments","text":"<ul> <li>scroll down to see the comments, has voting &amp; reactionn</li> <li>very useful for leaving quicknotes if you are not at are not at your laptop</li> </ul>"},{"location":"comments/#installation","title":"installation","text":"<ul> <li>this is much simpler than in the documentation</li> <li>add the new repo to the list here:</li> <li>https://github.com/settings/installations/34265629</li> <li>https://squidfunk.github.io/mkdocs-material/setup/adding-a-comment-system/</li> <li>repo: general &gt; settings &gt; features</li> <li>configure the giscus app</li> <li>https://giscus.app/</li> <li>use their snippet with defaults: <code>pathname</code> &amp; category <code>general</code></li> <li>add it to <code>overrides/partials/comments.html</code></li> <li>in <code>mkdocs.yml</code> add overrides here</li> </ul> <pre><code>theme:\n  name: material\n  custom_dir: overrides\n  icon:\n</code></pre>"},{"location":"cookiecutter/","title":"cookiecutter","text":"<ul> <li>cookiecutter is a folder template</li> <li>this repo is a cookiecutter</li> <li>it is so simple it is stupid that everyone has overlooked this</li> <li>I believe this spawned from the django web framework app spawn command</li> </ul>","tags":["cookiecutter"]},{"location":"cookiecutter/#screencast","title":"screencast","text":"","tags":["cookiecutter"]},{"location":"cookiecutter/#cookiecutterjson","title":"<code>cookiecutter.json</code>","text":"<ul> <li>here is the <code>cookiecutter.json</code> file that deploys this project</li> </ul> <pre><code>{\n    \"proj_name\": \"project name\",\n    \"release_date\": \"{% now 'local' %}\",\n    \"version\": \"0.1.0\"\n}\n</code></pre> <ul> <li>these values provide variables with defaults</li> <li>they also become a command line prompt during deployment to override the defaults</li> <li>beyond this, these values can be used in folder &amp; file names</li> <li>and inside files</li> <li>the format to reuse these variables</li> </ul> <pre><code>{{ cookiecutter.&lt;variable name&gt; }}\n</code></pre> <ul> <li>your project can contain anything you want</li> <li>multiple languages</li> <li>pre and post hooks are included to run commands before or after folder deployment</li> </ul>","tags":["cookiecutter"]},{"location":"cookiecutter/#cookiecutter-command","title":"cookiecutter command","text":"<ul> <li>you can also list your installed templates <code>cookiecutter -l</code> among other options</li> </ul> <pre><code>Usage: cookiecutter [OPTIONS] [TEMPLATE] [EXTRA_CONTEXT]...\n\n  Create a project from a Cookiecutter project template (TEMPLATE).\n\n  Cookiecutter is free and open source software, developed and managed by\n  volunteers. If you would like to help out or fund the project, please get in\n  touch at https://github.com/cookiecutter/cookiecutter.\n\nOptions:\n  -V, --version                Show the version and exit.\n  --no-input                   Do not prompt for parameters and only use\n                               cookiecutter.json file content\n  -c, --checkout TEXT          branch, tag or commit to checkout after git\n                               clone\n  --directory TEXT             Directory within repo that holds\n                               cookiecutter.json file for advanced\n                               repositories with multi templates in it\n  -v, --verbose                Print debug information\n  --replay                     Do not prompt for parameters and only use\n                               information entered previously\n  --replay-file PATH           Use this file for replay instead of the\n                               default.\n  -f, --overwrite-if-exists    Overwrite the contents of the output directory\n                               if it already exists\n  -s, --skip-if-file-exists    Skip the files in the corresponding directories\n                               if they already exist\n  -o, --output-dir PATH        Where to output the generated project dir into\n  --config-file PATH           User configuration file\n  --default-config             Do not load a config file. Use the defaults\n                               instead\n  --debug-file PATH            File to be used as a stream for DEBUG logging\n  --accept-hooks [yes|ask|no]  Accept pre/post hooks\n  -l, --list-installed         List currently installed templates.\n  -h, --help                   Show this message and exit.\n</code></pre>","tags":["cookiecutter"]},{"location":"cookiecutter/#using-a-local-folder-without-git","title":"using a local folder without git","text":"<ul> <li>this repository has a <code>template/</code> folder</li> <li>you do not have to learn git or use a git repository to use cookiecutte</li> <li>it contains a bare minimum cookiecutter template</li> <li>this is how you can run cookiecutter locally</li> </ul> <pre><code>cookiecutter template/\n# then it prompts you\nproj_name [project name]: example\nvariable_a [variable a]: abc\nvariable_b [variable b]: def\nrelease_date [2023-10-05]: \nversion [0.1.0]: \n</code></pre>","tags":["cookiecutter"]},{"location":"cookiecutter/#empty-template","title":"empty template","text":"<ul> <li>there is a bare minimum cookiecutter template in <code>templat/</code></li> <li>you can reuse it in your project or deploy it by itself</li> </ul> <pre><code>cookiecutter https://github.com/shane0/workflow --directory template/\n</code></pre>","tags":["cookiecutter"]},{"location":"deploy/","title":"deployment","text":"<ul> <li>after deployment you can add more options found here</li> <li>https://github.com/shane0/workflow </li> </ul>","tags":["cookiecutter","deployments"]},{"location":"deploy/#screencast","title":"screencast","text":"","tags":["cookiecutter","deployments"]},{"location":"deploy/#deploying-the-first-time","title":"deploying the first time","text":"<ul> <li>on a new machine</li> <li>install cookiecutter</li> <li>deploy this cookiecutter the first time<sup>1</sup></li> </ul> <pre><code>cookiecutter https://github.com/shane0/workflow\n</code></pre>","tags":["cookiecutter","deployments"]},{"location":"deploy/#deploying-seubsequently","title":"deploying seubsequently","text":"<ul> <li>after you have used it once you can just use it by name</li> </ul> <pre><code>cookiecutter workflow \n</code></pre>","tags":["cookiecutter","deployments"]},{"location":"deploy/#empty-cookiecutter-template","title":"empty cookiecutter template","text":"<pre><code>cookiecutter https://github.com/shane0/workflow --directory template/\n</code></pre>","tags":["cookiecutter","deployments"]},{"location":"deploy/#recent-deployments","title":"recent deployments","text":"<ul> <li>2023-09-17: buddhism mkdocs</li> <li>added some docs here for the optional mkdocs github deployment</li> <li>2023-09-19: cheatsheets and snippets</li> </ul> <ol> <li> <p>note: by default cookiecutter  saves a copy of this template in  <code>~/.cookiecutters/workflow/</code> the first time you use\u00a0\u21a9</p> </li> </ol>","tags":["cookiecutter","deployments"]},{"location":"failover/","title":"failover","text":""},{"location":"failover/#deployment","title":"deployment","text":"<pre><code>graph LR \ncookiecutter --&gt; script</code></pre>"},{"location":"failover/#docs","title":"docs","text":"<pre><code>graph LR \nmkdocs --&gt; pdf\npdf --&gt; markdown </code></pre>"},{"location":"failover/#command-line","title":"command line","text":"<pre><code>graph LR \nclick_ --&gt; alias </code></pre>"},{"location":"files/","title":"file structure","text":"<ul> <li>homepage: <code>docs/index.md</code> the home page for the local mkdocs server</li> <li>small tasks: <code>docs/todo.md</code>  this displays your command line task list</li> <li><code>todocli/todo.txt</code> and <code>todocli/done.txt</code></li> <li>sub projects or related project folders: <code>docs/projects.md</code> </li> <li>examples: you start a project folder leave the command to open it in vscode <code>code &lt;your sub project folder&gt;/</code></li> <li>links to relevant web addresses or network storage, related files etc.</li> <li><code>docs/workflow.md</code></li> <li>keep notes where things hare</li> <li>imagine you revisit your folder in the future and do not remember what the folder is for, this file will get you started in the right direction so whatever you work on</li> </ul>","tags":["workflow"]},{"location":"first/","title":"first principles","text":"<p>Here\u2019s a more detailed 7-step process for first principles thinking:</p> <ol> <li>Define the Problem Clearly:</li> <li> <p>Begin by clearly understanding and stating the problem you're trying to solve or the question you're investigating.</p> </li> <li> <p>Gather Existing Knowledge and Assumptions:</p> </li> <li> <p>Identify the current information, beliefs, or practices around this issue. What do people generally assume is true?</p> </li> <li> <p>Challenge Every Assumption:</p> </li> <li> <p>Systematically question these assumptions. Ask yourself why things are done a certain way and if these assumptions are necessary or true.</p> </li> <li> <p>Break Down the Problem to its Basic Elements:</p> </li> <li> <p>Isolate the most fundamental truths that are objectively verifiable and undeniable. Strip away any excess complexity to get to the root of the issue.</p> </li> <li> <p>Understand Why These Fundamentals are True:</p> </li> <li> <p>Validate why the basic elements you've identified are true. Are they based on evidence, or are they assumptions that you mistakenly accepted?</p> </li> <li> <p>Reconstruct from First Principles:</p> </li> <li> <p>Build your understanding or solution from the ground up, using only the core truths identified in the previous steps. Work upwards logically without letting conventional thinking influence your approach.</p> </li> <li> <p>Develop and Test New Solutions:</p> </li> <li>Once you\u2019ve restructured the problem using first principles, brainstorm novel solutions and test them rigorously. The goal is to arrive at approaches that are more efficient, innovative, or accurate based on your fresh understanding. </li> </ol> <p>This expanded process encourages deeper analysis and critical thinking at each step.</p>"},{"location":"github_pages/","title":"github pages (wip)","text":"<ul> <li>on https://github.com/shane0</li> <li>create an empty github repo</li> <li>on the laptop</li> <li>deploy the workflow template</li> </ul> <pre><code>code &lt;name of project&gt;\nmks\n# edit your mkdocs site\n# one time upload\n./upload.sh\nmv upload.sh utils/\n</code></pre> <p>cookiecutter workflow</p> <p>```</p> <ul> <li>run the included script <code>upload.sh</code></li> <li>copy the code for uploading a new folder</li> </ul>"},{"location":"github_pages/#2023-09-17","title":"2023-09-17","text":"<ul> <li>https://shane0.github.io/buddhism/</li> <li>pipeline fails:</li> <li>mike</li> <li>ERROR   -  Config value 'plugins': The \"glightbox\" plugin is not installed</li> <li>mkdocs-git-revision-date-localized-plugin missing</li> </ul>"},{"location":"glossary/","title":"glossary","text":"","tags":["glossary"]},{"location":"glossary/#mkdocs-glossary","title":"mkdocs glossary","text":"<ul> <li>mouse over this word to see the definition: PRAJNA</li> <li>that is provided site wide</li> <li>to add terms use all caps and add the word to <code>includes/abbreviations.md</code></li> </ul>","tags":["glossary"]},{"location":"glossary/#gitlab-feature-glossary-template","title":"gitlab feature glossary template","text":"<pre><code>## FeatureName glossary\n\nThis glossary provides definitions for terms related to FeatureName.\n\n| Term   | Definition              | Additional category |\n|--------|-------------------------|---------------------|\n| Term A | Term A does this thing. |                     |\n| Term B | Term B does this thing. |                     |\n| Term C | Term C does this thing. |                     |\n</code></pre>","tags":["glossary"]},{"location":"maze/","title":"maze","text":"<ul> <li>if you find yourself donw a rabbit hole or in the weeds start here</li> <li>mazes can be intentional or unintentional </li> <li>there are algorithms for following mazes that remove stress &amp; confusion</li> <li>mazes can be dynamic meaning the paths dead ends or exits move around</li> <li>a maze has an exit and if there is no exit then it is a trap</li> <li>mazes can have paths that are dead ends</li> <li>mazes can have paths that are detours, meaning they lead back to the path</li> <li>mazes can have more than one exist path and the shortest is preferred</li> </ul>","tags":["maze","troubleshooting"]},{"location":"maze/#breadcrumbs","title":"breadcrumbs","text":"<ul> <li>you can mark paths visited or unvisited</li> <li>you can mark forks visited or univsited </li> <li>you can mark visited forks exit or dead end or detour </li> <li>a complete breadcrumb takes someone else directly to the exit using the shortest path</li> </ul>","tags":["maze","troubleshooting"]},{"location":"maze/#follow-one-wall-method","title":"follow one wall method","text":"<ul> <li>follow one wall to its end it leads to one of three things: the escape, a dead end, or was a detour back to the path you were on</li> </ul>","tags":["maze","troubleshooting"]},{"location":"maze/#forks","title":"forks","text":"<ul> <li>if a path forks and you have vision follow the shortest fork first</li> </ul>","tags":["maze","troubleshooting"]},{"location":"maze/#unintentional-mazes","title":"unintentional mazes","text":"","tags":["maze","troubleshooting"]},{"location":"maze/#top-7-maze-algorithms-from-the-robot","title":"Top 7 Maze Algorithms from the robot","text":"<p>Note: The \"best\" algorithm often depends on the specific maze and desired outcome. Here are seven popular algorithms commonly used for maze solving:</p> <ol> <li>Depth-First Search (DFS):</li> <li>Traverses a graph or tree by going as deep as possible along each branch before backtracking.</li> <li> <p>Can be efficient for mazes with relatively few dead ends.</p> </li> <li> <p>Breadth-First Search (BFS):</p> </li> <li>Explores all nodes at a given depth before moving to the next depth level.</li> <li> <p>Often used to find the shortest path in a maze.</p> </li> <li> <p>Dijkstra's Algorithm:</p> </li> <li>Finds the shortest path between two nodes in a graph with weighted edges (e.g., representing distances or costs).</li> <li> <p>Useful for mazes where different paths have varying lengths or difficulties.</p> </li> <li> <p>A* Search:</p> </li> <li>A more efficient version of Dijkstra's algorithm that uses a heuristic function to estimate the distance to the goal.</li> <li> <p>Often used for mazes where finding the shortest path is important.</p> </li> <li> <p>Bidirectional Search:</p> </li> <li>Searches from both the start and goal nodes simultaneously, often leading to faster solutions.</li> <li> <p>Useful for mazes where the goal is known in advance.</p> </li> <li> <p>Iterative Deepening Depth-First Search:</p> </li> <li>A variation of DFS that avoids exploring paths that are too long.</li> <li> <p>Can be useful for mazes with large search spaces.</p> </li> <li> <p>Wall-Following Algorithms:</p> </li> <li>Follow the wall of the maze to find a path.</li> <li>Simple but can be inefficient for complex mazes.</li> </ol> <p>These are just a few of the many maze-solving algorithms available. The best choice for a particular maze depends on factors such as the maze's size, complexity, and the desired solution properties.</p>","tags":["maze","troubleshooting"]},{"location":"maze/#a-python-code-example","title":"a python code example","text":"<ul> <li>you can run this online at &lt;https://colab.research.google.com/</li> </ul> <pre><code># Define a simple maze\nmaze = [\n    [1, 1, 1, 1, 1, 1, 1],\n    [1, 0, 0, 0, 1, 0, 1],\n    [1, 0, 1, 0, 1, 0, 1],\n    [1, 0, 1, 0, 0, 0, 1],\n    [1, 0, 1, 1, 1, 0, 1],\n    [1, 0, 0, 0, 0, 0, 1],\n    [1, 1, 1, 1, 1, 0, 1]\n]\n\nstart = (1, 1)  # Starting point 'S'\nexit = (5, 5)   # Exit point 'E'\n\ndef print_maze(maze):\n    for row in maze:\n        print(\" \".join(str(cell) for cell in row))\n\ndef is_valid_move(maze, position, visited):\n    x, y = position\n    return (\n        0 &lt;= x &lt; len(maze) and            # Within maze bounds\n        0 &lt;= y &lt; len(maze[0]) and         # Within row bounds\n        maze[x][y] == 0 and               # It's an open path (not a wall)\n        position not in visited           # Not visited yet\n    )\n\ndef find_exit_path(maze, start, exit):\n    # Stack for DFS and set to keep track of visited positions\n    stack = [(start, [start])]\n    visited = set()\n\n    while stack:\n        (x, y), path = stack.pop()\n\n        # If we reach the exit, return the path\n        if (x, y) == exit:\n            return path\n\n        # Mark the current position as visited\n        visited.add((x, y))\n\n        # Explore the four possible directions (up, down, left, right)\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            new_pos = (x + dx, y + dy)\n            if is_valid_move(maze, new_pos, visited):\n                stack.append((new_pos, path + [new_pos]))\n\n    return None  # No path found\n\ndef mark_solution(maze, path):\n    for (x, y) in path:\n        maze[x][y] = 'P'  # Mark the path with 'P'\n\n# Print the original maze\nprint(\"Original Maze:\")\nprint_maze(maze)\n\n# Find the path\npath_to_exit = find_exit_path(maze, start, exit)\n\nif path_to_exit:\n    print(\"\\nPath found:\", path_to_exit)\n    # Mark the path on the maze and print it\n    mark_solution(maze, path_to_exit)\n    print(\"\\nSolved Maze:\")\n    print_maze(maze)\nelse:\n    print(\"\\nNo path found.\")\n</code></pre>","tags":["maze","troubleshooting"]},{"location":"mkdocs/","title":"mkdocs","text":"<ul> <li>serve with alias</li> </ul> <pre><code>alias mks='mkdocs serve'\n</code></pre> <ul> <li>serve with click</li> </ul> <pre><code>cli bujo m\n</code></pre>","tags":["alias","mkdocs","click"]},{"location":"mkdocs/#includes","title":"includes","text":"<ul> <li>embed docs</li> <li>splice in by line numbers <code>example.md:2:5</code></li> </ul> <pre><code>-8&lt;- \"includes/example.md&gt;\n</code></pre>","tags":["alias","mkdocs","click"]},{"location":"mkdocs/#site-wide-glossary","title":"site wide glossary","text":"<ul> <li>mouse over this: PRAJNA</li> <li>add more here: <code>includes/abbreviations.md</code></li> </ul>","tags":["alias","mkdocs","click"]},{"location":"mkdocs/#citation","title":"citation","text":"<pre><code>- this[^1]\n[^1]: requires software installation\n</code></pre>","tags":["alias","mkdocs","click"]},{"location":"mkdocs/#troubleshooting-lightbox","title":"troubleshooting lightbox","text":"<pre><code>pip install mkdocs-glightbox\n</code></pre>","tags":["alias","mkdocs","click"]},{"location":"projects/","title":"projects","text":"<ul> <li>I usually start with tasks which sometimes spawn folders</li> <li>folders usually are within the main project folde but sometimes are outside it</li> <li>if the project folder spawned is somewhere else I will add a code block to open it locally</li> <li>example <code>code ~/wherever/</code> or a url or shared network folder or cloud resource</li> <li><code>projects.md</code> is optional for whatever you can use it or delete it</li> <li>usually it's code blocks used for local development</li> <li>an index of scattered information related to the project</li> <li>etc.</li> </ul>"},{"location":"python/","title":"python","text":"<ul> <li>macos: on a new laptop</li> <li>see setup page</li> <li>install homebrew</li> <li>install using pyenv</li> <li>see <code>dotfiles/</code> in this repo for more details</li> </ul>"},{"location":"python/#python-aliases","title":"python aliases","text":"<ul> <li>using venv in a folder</li> <li>http server</li> </ul> <pre><code>alias vvc='python3 -m venv venv'\nalias vv='source venv/bin/activate'\nalias vd='deactivate'\nalias htp='python -m http.server'\n</code></pre>"},{"location":"readability/","title":"readability","text":"<ul> <li>I use a combination of readability tools</li> <li>lexi</li> <li>markdown linters</li> <li>eli5</li> <li>active voice</li> <li>present tense</li> <li>avoid jargon</li> <li>when jargon is unavoidable I use mkdocs abbreviations</li> </ul>"},{"location":"readability/#jargon","title":"jargon","text":"<ul> <li>mkdocs has a site wide glossary</li> <li>example: hover the mouse over: DUKKHA</li> <li>to use it just add your jargon in ALLCAPS</li> <li>add the jargon to: <code>includes/abbreviations.md</code></li> </ul>"},{"location":"readability/#lexi","title":"lexi","text":"<ul> <li>example: https://github.com/shane0/workflow/pull/3</li> <li>add this permission in your reposettings for the lexi action to work</li> <li>repo &gt; settings &gt; actions &gt; general &gt; change <code>Workflow permissions</code> to read/write</li> <li>add this file <code>.github/workflows/readability.yml</code></li> <li>local action</li> </ul>"},{"location":"readability/#lexi-from-command-line","title":"lexi from command line","text":"<pre><code>yarn run:local:report ./test-data/old ./test-data/new\n</code></pre> <ul> <li>action</li> </ul> <pre><code>name: Report readability\n\n# This action only works on pull request events\non: pull_request\n\njobs:\n    report-readability:\n        name: readability\n        runs-on: ubuntu-latest\n        steps:\n            - name: Checkout repo with history\n              uses: actions/checkout@v4\n              with:\n                  fetch-depth: 0\n            - uses: Rebilly/lexi@v2\n              with:\n                  github-token: ${{ secrets.GITHUB_TOKEN }}\n                  glob: 'docs/*md'\n</code></pre> <pre><code>yarn run v1.22.19\n$ tsx ./src/cli/report.ts ./test-data/old ./test-data/new\n\n**Overall readability score:** 0 (\ud83d\udfe2 +0)\n\nFile | Readability\n--- | ---\n[new.md](https://github.com/repo-name/blob/commit-sha/new.md \"new.md\") | 0 (-)\n\n\n&lt;details&gt;\n  &lt;summary&gt;View detailed metrics&lt;/summary&gt;\n\n\ud83d\udfe2 - Shows an _increase_ in readability\n\ud83d\udd34 - Shows a _decrease_ in readability\n\nFile | Readability | FRE | GF | ARI | CLI | DCRS\n--- | --- | --- | --- | --- | --- | ---\n[new.md](https://github.com/repo-name/blob/commit-sha/new.md \"new.md\") | 0 | 0 | 19 | 22 | 19 | 11\n&amp;nbsp; | - | - | - | - | - | -\n\n\nAverages:\n\n&amp;nbsp; | Readability | FRE | GF | ARI | CLI | DCRS\n--- | --- | --- | --- | --- | --- | ---\nAverage | 0 | 0 | 19 | 22 | 19 | 11\n&amp;nbsp; | \ud83d\udfe2 +0 | \ud83d\udfe2 +0 | \ud83d\udfe2 +0 | \ud83d\udfe2 +0 | \ud83d\udfe2 +0 | \ud83d\udfe2 +0\n\n\n&lt;details&gt;\n  &lt;summary&gt;View metric targets&lt;/summary&gt;\n\nMetric | Range | Ideal score\n--- | --- | ---\nFlesch Reading Ease | 100 (very easy read) to 0 (extremely difficult read) | 60\nGunning Fog | 6 (very easy read) to 17 (extremely difficult read) | 8 or less\nAuto. Read. Index | 6 (very easy read) to 14 (extremely difficult read) | 8 or less\nColeman Liau Index | 6 (very easy read) to 17 (extremely difficult read) | 8 or less\nDale-Chall Readability | 4.9 (very easy read) to 9.9 (extremely difficult read) | 6.9 or less\n\n&lt;/details&gt;\n\n&lt;/details&gt;\n\nDone in 0.74s.\n</code></pre>"},{"location":"scripts/","title":"scripts","text":"<ul> <li>when you deploy this template</li> <li>if you create any scripts you might reuse in projects later</li> <li>add them to this template with these update instructions</li> <li>default: <code>~/workflow/{{cookiecutter_folder}}/&lt;example&gt;/</code></li> <li>optional: <code>~/workflow/&lt;example&gt;/</code></li> </ul>","tags":["deployment","update"]},{"location":"scripts/#commands","title":"commands","text":"<ul> <li>prompts <code>y/n</code> so each command is an option</li> </ul> <pre><code>#!/usr/bin/env bash\n\n# pick your options \n\n# failover if you do not want to install cookiecutter\ncommands=(\n    \"echo mkdocs\"\n    \"echo update the port number in the mkdocs and vscode task\"\n    \"mkdocs new .\"\n    \"rm mkdocs.yml\"\n    \"cp ~/template/mkdocs.yml .\"\n    \"&gt; docs/index.md\"\n    \"echo \"[TAGS]\" &gt;&gt; docs/index.md\"\n    \"mkdir docs/images\"\n    \"mkdir includes\"\n    \"mkdir .vscode\"\n    \"cp ~/template/.vscode/mkdocs.json .vscode/\"\n    \"echo todocli\"\n    \"cp ~/template/docs/todocli.md docs/\"\n    \"cp -R ~/template/todocli/ .\"\n    \"echo click\"\n    \"$HOME/template/deploy.sh\"\n    \"echo update upload.sh\"\n)\n\n# Iterate over the list of commands\nfor command in \"${commands[@]}\"; do\n    # Prompt the user if they want to run the command\n    echo \"run '$command'? (y/n)\"\n    read -r -n 1 response\n\n    # If the user says yes, run the command\n    if [[ $response == \"y\" ]]; then\n        echo \"Running '$command'\"\n        eval \"$command\"\n    fi\ndone\n</code></pre>","tags":["deployment","update"]},{"location":"setup/","title":"setup","text":"<ul> <li>this repo has <code>dotfiles/</code> with some setup scripts</li> </ul>"},{"location":"setup/#linux","title":"linux","text":"<ul> <li>if you use linux you are smarter than me and already know how to setup</li> <li>I used to use linux &amp; will return someday</li> </ul>"},{"location":"setup/#macos","title":"macos","text":"<ul> <li>I currently use this on macos &amp; can assist if you get stuck</li> <li>install https://brew.sh/</li> <li>once that is setup you can use it to install git, pyenv + python, etc.</li> </ul>"},{"location":"style_guide/","title":"style guide","text":"<ul> <li>https://docs.gitlab.com/ee/development/documentation/styleguide/index.html#organize-by-topic-not-by-type</li> <li>present tense</li> <li>active voice</li> <li>avoid -ing</li> <li>content templates https://docs.gitlab.com/ee/development/documentation/topic_types/</li> </ul>"},{"location":"style_guide/#my-arbitrary-preferences","title":"my arbitrary preferences","text":"<ul> <li>life is way too short to waste time on:</li> <li>title case</li> <li>periods</li> <li>numbered lists (use bullets)</li> <li>in step by step instructions never get lazy and refer someone up or downward</li> <li>...</li> </ul>"},{"location":"theory/","title":"theory","text":"<ul> <li>honesty: cut through fear, fix the things people are afraid to talk about</li> <li>transparency: share everything</li> <li>design: make everything as simple as possible. complexity is your #1 enemy</li> <li>design: find the shortest route, focus on x exact edits: folders or files or people, etc.</li> </ul>"},{"location":"todo/","title":"todo cli integration","text":"<ul> <li>my workflow template deployments always include todo cli</li> <li>except I use aliases so it runs from inside any folder</li> <li>tasks are rendered on mkdocs</li> <li>tasks sometimes become a project</li> </ul>","tags":["mkdocs","todo"]},{"location":"todo/#screencast","title":"screencast","text":"","tags":["mkdocs","todo"]},{"location":"todo/#layout","title":"layout","text":"<pre><code>todocli/\n\u251c\u2500\u2500 done.txt\n\u251c\u2500\u2500 report.txt\n\u251c\u2500\u2500 todo.cfg\n\u251c\u2500\u2500 todo.sh\n\u251c\u2500\u2500 todo.txt\n&lt;projects&gt;/ template or whatever\n</code></pre>","tags":["mkdocs","todo"]},{"location":"todo/#todotxt","title":"todo.txt","text":"<pre><code>(A) use this often and keep it updated\n(B) add cors api request example\n(B) test stuff.sh and tune up\n(B) fix the cookiecutter hook on macos\n(B) add vscode snippets\n(A) add cookiecutter variables for mkdocs\n(A) document using gh pages\n(A) cli c commitizen command lines\n(B) add the workflow button to the homepage\n(A) screencast homepage workflow projects tasks click cookiecutter\n</code></pre>","tags":["mkdocs","todo"]},{"location":"todo/#donetxt","title":"done.txt","text":"<pre><code>x 2022-06-07 add bujo\nx 2023-09-13 copy from gitlab to github\nx 2023-09-13 setup gh pages\nx 2023-09-14 add lexi for cli tests\nx 2023-09-14 add lexi\nx 2023-09-14 lexi action for cli demo\nx 2023-09-14 setup discussion\nx 2023-09-17 deploy a new buddhism site\n</code></pre>","tags":["mkdocs","todo"]},{"location":"todo/#alias","title":"alias","text":"<pre><code># todocli app\nalias t='clear &amp;&amp; ./todocli/todo.sh'\nalias d='clear &amp;&amp; t listpri a'\nalias snooze='clear &amp;&amp; t listpri'\nalias done='clear &amp;&amp; cat ./todocli/done.txt'\nalias tedit='vim ./todocli/todo.txt'\nalias tall='clear &amp;&amp; find . -name \"todo.txt\" | xargs grep \"+\"'\nalias tpri='clear &amp;&amp; find . -name \"todo.txt\" | xargs grep \"(A\"'\nalias tprib='clear &amp;&amp; find . -name \"todo.txt\" | xargs grep \"(B\"'\nalias tpric='clear &amp;&amp; find . -name \"todo.txt\" | xargs grep \"(C\"'\nalias thelp='clear &amp;&amp; ./todocli/todo.sh shorthelp'\n</code></pre>","tags":["mkdocs","todo"]},{"location":"todo/#usage","title":"usage","text":"<pre><code>  Usage: todo.sh [-fhpantvV] [-d todo_config] action [task_number] [task_description]\n\n  Actions:\n    add|a \"THING I NEED TO DO +project @context\"\n    addm \"THINGS I NEED TO DO\n          MORE THINGS I NEED TO DO\"\n    addto DEST \"TEXT TO ADD\"\n    append|app ITEM# \"TEXT TO APPEND\"\n    archive\n    command [ACTIONS]\n    deduplicate\n    del|rm ITEM# [TERM]\n    depri|dp ITEM#[, ITEM#, ITEM#, ...]\n    do ITEM#[, ITEM#, ITEM#, ...]\n    help [ACTION...]\n    list|ls [TERM...]\n    listall|lsa [TERM...]\n    listaddons\n    listcon|lsc [TERM...]\n    listfile|lf [SRC [TERM...]]\n    listpri|lsp [PRIORITIES] [TERM...]\n    listproj|lsprj [TERM...]\n    move|mv ITEM# DEST [SRC]\n    prepend|prep ITEM# \"TEXT TO PREPEND\"\n    pri|p ITEM# PRIORITY\n    replace ITEM# \"UPDATED TODO\"\n    report\n    shorthelp\n\n  Actions can be added and overridden using scripts in the actions\n  directory.\n\n  See \"help\" for more details.\n</code></pre>","tags":["mkdocs","todo"]},{"location":"troubleshooting/","title":"troubleshooting template","text":"<ul> <li>gitlab troubleshooting topic</li> </ul> <pre><code>## Troubleshooting\n\nWhen working with &lt;x feature&gt;, you might encounter the following issues.\n\n### The message or a description of it\n\nYou might get an error that states &lt;error message&gt;.\n\nThis issue occurs when...\n\nThe workaround is...\n\n## Error: `unexpected disconnect while reading sideband packet`\n\nUnstable networking conditions can cause Gitaly to fail when trying to fetch large repository\ndata from the primary site. Those conditions can result in this error:\n\n```plaintext\ncurl 18 transfer closed with outstanding read data remaining &amp; fetch-pack:\nunexpected disconnect while reading sideband packet\n```\n\nTo resolve this issue...\n</code></pre>","tags":["troubleshooting"]},{"location":"update/","title":"update the template","text":"<ul> <li>clone locally, update, push</li> </ul> <pre><code>git clone https://shane0.github.io/workflow/ \n</code></pre> <ul> <li>the next time you deploy at the prompt you can choose to download it</li> </ul>","tags":["cookiecutter","update"]},{"location":"workflow/","title":"workflow","text":"<ul> <li>this file is <code>docs/workflow.md</code></li> <li>a workflow file gets you or someone else directly to the exit using the shortest path</li> <li>when interrupted from a project workflow is a partial breadcrumb trail so you can pickup where you were quickly</li> <li>a workflow allows something to move toward automation and eliminates repition</li> <li>what I usually put here is instructions for managing data in this folder itself</li> <li>this is optional use it however you see fit</li> <li>a workflow might involve these other pages</li> <li><code>docs/project.md</code> </li> <li><code>docs/todo.md</code> </li> <li><code>docs/troubleshooting.md</code> </li> <li>if you create a sub project do not put it here - it should have its own <code>workflow.md</code></li> </ul>"},{"location":"workflow/#workflow-for-this-repo","title":"workflow for this repo","text":"<ul> <li>there are two workflows each has a button on the homepage</li> <li>deploying this workflow template</li> <li>updating the template itself which is this repo</li> <li>the actual cookiecutter template is this folder: <code>{{cookiecutter.proj_name}}</code></li> <li>on my laptop I have this cloned so from a terminal i just type</li> </ul> <pre><code>code workflow/\n# make changes and push with\n./push.sh\n# that script directs you in the prompt for the rest\n# that script opens the url to this repo\n</code></pre>"},{"location":"workflow/#optional-stuff-included","title":"optional stuff included","text":"<ul> <li>this template includes a few pages that are optional</li> <li>tasks</li> <li>project folders</li> <li> <p>click automations</p> </li> <li> <p>later if you return to a project you should be able to read this workflow page and pick up where you left off on your project</p> </li> <li>what the purpose of this folder is to begin with</li> <li>what file you were creating or updating</li> <li>where it is at on your computer or the cloud etc.</li> <li>this page is optional if you are on a simple task or project just use todo</li> <li>sometimes you end up in your own or someone's elses mess</li> </ul> <pre><code>graph TD\nworkflow --&gt; deployment\nworkflow --&gt; apps \napps -- tiny command line automation --&gt; aliases\ndeployment --&gt; sub_projects  --&gt; apps\napps -- simple command line task management --&gt; todocli\napps -- larger command line automation --&gt; click_</code></pre> <pre><code>index.md\n\n# optional\ntodo.md\nprojects.md\nworkflow.md\n\n# automations\nclick.md\nutils/bash_aliases\n</code></pre>"},{"location":"bujo/09_September/","title":"09 Sep 2024","text":"<ul> <li>setting up a new laptop</li> <li>updating docs as I go</li> <li>added <code>dotfiles/</code> and some setup notes</li> <li>reason: my son wanted me to try no mans sky </li> <li>this required a faster laptop so I'm on a new m3 mac air</li> <li>much faster wish I upgraded earlier</li> <li>it's smaller and lighter + 15\" </li> </ul>"},{"location":"bujo/2023/","title":"2023","text":"<ul> <li>meditation class level 1 - 20 weeks</li> <li>strength training &amp; prep for hiking trips</li> <li>music composition</li> <li>updating previous apps: wordpress, tw, django</li> </ul>"},{"location":"bujo/2023/#9-sep-2023","title":"9 sep 2023","text":"<ul> <li>test this on buddhism/ &amp; cheatsheets/</li> <li>updating gh pages docs</li> </ul>"},{"location":"bujo/2023/#radoms","title":"radoms","text":"<ul> <li>try this: https://github.com/Musilix/Mymyc</li> </ul>"},{"location":"","title":"Home","text":"<p>workflow/ is a folder fulll of the best tools</p> <p>Workflow is a folder of reusable tools, including command line automation, task tracking, and online or offline collaboration features, designed to streamline personal or professional projects, keep things organized, and leave a clear trail for others to follow.</p>"},{"location":"#screencast","title":"screencast","text":""},{"location":"#workflow-template","title":"workflow template","text":"<p>get setup deploy this template update this template</p> <p>first principles workflow projects tasks bujo</p> <p>sites</p> <p>home buddhism cheatsheets retro games</p>"},{"location":"#alias","title":"alias","text":"<ul> <li>alias shortcuts</li> <li>mkdocs</li> </ul>"},{"location":"#click","title":"click","text":"<ul> <li>alias shortcuts</li> <li>click</li> <li>mkdocs</li> </ul>"},{"location":"#cookiecutter","title":"cookiecutter","text":"<ul> <li>cookiecutter</li> <li>deployment</li> <li>update the template</li> </ul>"},{"location":"#cucumber","title":"cucumber","text":"<ul> <li>behave (cucumber tests)</li> </ul>"},{"location":"#deployment","title":"deployment","text":"<ul> <li>scripts</li> </ul>"},{"location":"#deployments","title":"deployments","text":"<ul> <li>deployment</li> </ul>"},{"location":"#glossary","title":"glossary","text":"<ul> <li>glossary</li> </ul>"},{"location":"#maze","title":"maze","text":"<ul> <li>maze</li> </ul>"},{"location":"#mkdocs","title":"mkdocs","text":"<ul> <li>mkdocs</li> <li>todo cli integration</li> </ul>"},{"location":"#python","title":"python","text":"<ul> <li>behave (cucumber tests)</li> </ul>"},{"location":"#test","title":"test","text":"<ul> <li>behave (cucumber tests)</li> </ul>"},{"location":"#todo","title":"todo","text":"<ul> <li>todo cli integration</li> </ul>"},{"location":"#troubleshooting","title":"troubleshooting","text":"<ul> <li>maze</li> <li>troubleshooting template</li> </ul>"},{"location":"#update","title":"update","text":"<ul> <li>click</li> <li>scripts</li> <li>update the template</li> </ul>"},{"location":"#workflow","title":"workflow","text":"<ul> <li>file structure</li> </ul>"}]}