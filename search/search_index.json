{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about/","title":"about","text":"<ul> <li>cut through the bs</li> <li>evetually I'll make a screencast of how to use this </li> </ul>"},{"location":"about/#layout","title":"layout","text":"<pre><code>\u251c\u2500\u2500 docs &lt;-- mkdocs\n\u251c\u2500\u2500 includes &lt;-- snippets &amp; gloassary (mkdocs in the browser)\n\u251c\u2500\u2500 plugins &lt; command line automations\n\u2514\u2500\u2500 todocli &lt;-- task management files (works in command line and can be viewed in mkdocs)\n</code></pre> Example <pre><code>tree -d -L 1\n</code></pre>"},{"location":"about/#options","title":"options","text":"<ul> <li>these are not installed by default</li> </ul> <pre><code>more click plugins\ndocs readability measurement locally or remote on push and pull requests (lexi)\nmarkdownlint in editor, command line or remote pipelines\ngithub integrations for repos, actions and pages\nlocal or remote tests (includes examples in cucumber, python &amp; js)\nmore aliases and shell scripts\n</code></pre> <p>Info</p> <pre><code>- a no nonsense workflow centered on the power of simplicity &amp; ease of maintanence\n- using parts from:\n- git\n- linux standards\n- [data science template](https://github.com/patrickmineault/true-neutral-cookiecutter)\n- [readme (docs first) driven development](https://tom.preston-werner.com/2010/08/23/readme-driven-development.html)\n- [behavior (tests first) sdriven](https://cucumber.io/docs/cucumber/)\n- [gitlab style guide](https://colab.research.google.com/corgiredirector?site=https%3A%2F%2Fdocs.gitlab.com%2Fee%2Fdevelopment%2Fdocumentation%2Ftopic_types%2F)\n- &lt;https://www.writethedocs.org&gt;\n</code></pre> <p>Example</p> <pre><code>- project templates: [cookiecutter](https://github.com/cookiecutter/cookiecutter)\n- task tracking: [todocli](https://github.com/francoischalifour/todo-cli)\n- modular command line automation: [click](https://click.palletsprojects.com/en/8.1.x/)\n- powerful documentaiton: [mkdocs](https://squidfunk.github.io/mkdocs-material/)\n- measurable readability: [lexi](https://github.com/Rebilly/lexi)\n</code></pre>"},{"location":"alias/","title":"alias shortcuts","text":"<ul> <li>aliases are keyboard shortcuts</li> <li>they can execute commands</li> <li>you can define them yourself</li> </ul>","tags":["alias","click"]},{"location":"alias/#modular-alias-files","title":"modular alias files","text":"<ul> <li><code>utils/alias_files/</code></li> </ul>","tags":["alias","click"]},{"location":"behave/","title":"behave (cucumber tests)","text":"","tags":["test","cookiecutter","cucumber","python"]},{"location":"behave/#gherkin-file","title":"gherkin file","text":"<ul> <li><code>features/file.feature</code></li> </ul> <pre><code>Feature: Verify log files\n    As a developer\n    I want to ensure the logs contain specific content\n    So that I can confirm the application is running correctly\n\n    Scenario Outline: Check log file &lt;filename&gt; for &lt;content&gt;\n        Given I have a log file named \"&lt;filename&gt;\"\n        When I check the file for \"&lt;content&gt;\"\n        Then the file should contain \"&lt;content&gt;\"\n\n        Examples:\n            | filename | content            |\n            | file1    | expected content 1 |\n            | file2    | expected content 2 |\n</code></pre>","tags":["test","cookiecutter","cucumber","python"]},{"location":"behave/#locally","title":"locally","text":"<pre><code>behave\n</code></pre> <pre><code>Feature: Verify log files # features/file.feature:1\n  As a developer\n  I want to ensure the logs contain specific content\n  So that I can confirm the application is running correctly\n  Scenario Outline: Check log file file1 for expected content 1 -- @1.1   # features/file.feature:13\n    Given I have a log file named \"file1\"                                 # features/steps/file_steps.py:8\n    When I check the file for \"expected content 1\"                        # features/steps/file_steps.py:13\n    Then the file should contain \"expected content 1\"                     # features/steps/file_steps.py:19\n\n  Scenario Outline: Check log file file2 for expected content 2 -- @1.2   # features/file.feature:14\n    Given I have a log file named \"file2\"                                 # features/steps/file_steps.py:8\n    When I check the file for \"expected content 2\"                        # features/steps/file_steps.py:13\n    Then the file should contain \"expected content 2\"                     # features/steps/file_steps.py:19\n\n1 feature passed, 0 failed, 0 skipped\n2 scenarios passed, 0 failed, 0 skipped\n6 steps passed, 0 failed, 0 skipped, 0 undefined\nTook 0m0.002s\n</code></pre>","tags":["test","cookiecutter","cucumber","python"]},{"location":"behave/#remotely","title":"remotely","text":"<ul> <li><code>.github/behave.yml</code></li> </ul> <pre><code>name: Run tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Setup Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.x'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n    - name: Run tests\n      env:\n        SKIP_TESTS: ${{ env.SKIP_TESTS }}\n      run: |\n        if [ -z \"$SKIP_TESTS\" ]; then\n          behave features/file.feature\n          # behave -c 1\n        else\n          echo \"Tests skipped due to SKIP_TESTS environment variable.\"\n        fi\n</code></pre>","tags":["test","cookiecutter","cucumber","python"]},{"location":"behave/#cookiecutter-for-rules","title":"cookiecutter for rules/","text":"<ul> <li>when features get bloated with rules I find this useful</li> <li>bust out rules into individual <code>rule/</code> folders with individual feature files</li> <li>https://cucumber.io/docs/gherkin/reference/?sbsearch=Rule#rule</li> </ul> <p>The purpose of the Rule keyword is to represent one business rule that should be implemented. It provides additional information for a feature. A Rule is used to group together several scenarios that belong to this business rule. A Rule should contain</p> <pre><code>cookiecutter rule\n</code></pre> <ul> <li>if it is not installed</li> </ul> <pre><code>cookiecutter https://github.com/shane0/workflow --directory rule\n</code></pre>","tags":["test","cookiecutter","cucumber","python"]},{"location":"behave/#three-amigos","title":"three amigos","text":"<ul> <li>the three amigos are from business dev &amp; test</li> <li>map it out</li> </ul> <ul> <li>good to go</li> </ul> <ul> <li>slice up the story </li> <li>someone is missing or not answering questions </li> <li>finish the story </li> </ul>","tags":["test","cookiecutter","cucumber","python"]},{"location":"cli/","title":"command line tools","text":""},{"location":"cli/#fuzzy-find","title":"fuzzy find","text":"<pre><code>cd\nfzf\n# start typing and magic happens\n</code></pre> <pre><code># fuzzy find then open\nalias v='vi $(fzf)'\n</code></pre>"},{"location":"click/","title":"click","text":"","tags":["click","update"]},{"location":"click/#alias","title":"alias","text":"<pre><code>alias cli='python cli.py'\n</code></pre>","tags":["click","update"]},{"location":"click/#screencast","title":"screencast","text":"","tags":["click","update"]},{"location":"click/#usage","title":"usage","text":"<ul> <li>click</li> <li>add your own plugins</li> <li>use this example: <code>plugings/bujo.py</code></li> </ul> <pre><code>Usage: cli.py bujo [OPTIONS] COMMAND [ARGS]...\n\n  bullet journaling &amp; todocli\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  day        week\n  dayfolder  create subfolder with named todays date\n  edit       edit plugin\n  folder     create bujo folder\n  future     bujo index file\n  index      bujo index file\n  m          mkdocs serve\n  month      month file\n  read       read a bujo/ file\n  remote     jobs on remotive\n  s          start dev server\n  snip       open snippet maker\n  todo       generic todo\n  week       week\n  ww         weather\n  year       week\n  zl         markdownlint\n</code></pre>","tags":["click","update"]},{"location":"click/#command-line","title":"command line","text":"<p>the command line is superior to the gui because it is more efficient, powerful, flexible, and versatile.</p> <ul> <li>efficiency: the command line does not have to render graphical elements, which makes it much faster than the gui.</li> <li>power: the command line gives users direct access to the underlying operating system and applications, which allows them to perform a wider range of tasks.</li> <li>flexibility: the command line can be used to interact with a wider range of systems and applications than the gui.</li> <li>versatility: the command line can be used for a wide variety of tasks, from system administration to software development.</li> <li>stability command line api interfaces are rarely broken by updates</li> </ul> <p>here are some specific examples of how the command line is more efficient, powerful, flexible, and versatile than the gui:</p> <ul> <li>efficiency: a system administrator can use the command line to quickly and easily check the status of all servers on a network, while using the gui would require opening multiple windows and clicking through various menus.</li> <li>power: a software developer can use the command line to compile and run code, while using the gui would require using a separate ide.</li> <li>flexibility: a user can use the command line to connect to a remote server, while using the gui would require a dedicated vpn client.</li> <li>versatility: a user can use the command line to automate tasks, create custom scripts, and manage files and directories, while using the gui would require using a variety of different tools.</li> </ul> <p>the command line is a more efficient, powerful, flexible, and versatile way to interact with computer systems than the gui.</p>","tags":["click","update"]},{"location":"comits/","title":"comits","text":"<ul> <li>the <code>./push.sh</code> script pushes changes to update your repository</li> <li>by calling the commit command <code>cz c</code> you will be prompted through a standard commit message eliminating human errors</li> <li>https://commitizen-tools.github.io/commitizen/</li> <li>commitizen can also update your changelog</li> </ul> <pre><code>pip install --user -U commitizen\n</code></pre>"},{"location":"comments/","title":"comments","text":"<ul> <li>scroll down to see the comments, has voting &amp; reactionn</li> <li>very useful for leaving quicknotes if you are not at are not at your laptop</li> </ul>"},{"location":"comments/#installation","title":"installation","text":"<ul> <li>this is much simpler than in the documentation</li> <li>add the new repo to the list here:</li> <li>https://github.com/settings/installations/34265629</li> <li>https://squidfunk.github.io/mkdocs-material/setup/adding-a-comment-system/</li> <li>repo: general &gt; settings &gt; features</li> <li>configure the giscus app</li> <li>https://giscus.app/</li> <li>use their snippet with defaults: <code>pathname</code> &amp; category <code>general</code></li> <li>add it to <code>overrides/partials/comments.html</code></li> <li>in <code>mkdocs.yml</code> add overrides here</li> </ul> <pre><code>theme:\n  name: material\n  custom_dir: overrides\n  icon:\n</code></pre>"},{"location":"complexity/","title":"complexity","text":""},{"location":"computation/","title":"computations","text":"<ul> <li>get nerdy and show computations</li> </ul> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\] <p>The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\), because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\).</p> <ul> <li>this feature requires some setup</li> <li>https://squidfunk.github.io/mkdocs-material/reference/math/#mathjax-docsjavascriptsmathjaxjs</li> </ul> <pre><code>$$\n\\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k}\n$$\n</code></pre>"},{"location":"computation/#eclipse-prediction-with-mathjax","title":"Eclipse Prediction with MathJax","text":"<p>This document demonstrates the use of MathJax to format equations for predicting eclipses.</p>"},{"location":"computation/#1-synodic-month","title":"1. Synodic Month","text":"<p>The synodic month represents the time between successive new moons. It\u2019s computed as follows:</p> \\[ T_s = \\frac{1}{\\frac{1}{T_m} - \\frac{1}{T_e}} \\] <p>where:</p> <ul> <li>\\( T_s \\) is the synodic month (about 29.53059 days),</li> <li>\\( T_m \\) is the Moon\u2019s sidereal orbital period around Earth (27.321661 days),</li> <li>\\( T_e \\) is Earth\u2019s sidereal orbital period around the Sun (365.25636 days).</li> </ul>"},{"location":"computation/#2-draconic-nodal-month","title":"2. Draconic (Nodal) Month","text":"<p>The draconic month is the period it takes the Moon to return to one of its nodes. Eclipses can occur only when the Moon is near a node:</p> \\[ T_d = 27.2122 \\text{ days} \\] <p>This period is important for predicting eclipse timings.</p>"},{"location":"computation/#3-eclipse-season","title":"3. Eclipse Season","text":"<p>Eclipses can occur when the Sun is near a node within a certain angular range, calculated by:</p> \\[ T_{\\text{season}} = \\frac{1}{\\frac{1}{T_d} - \\frac{1}{T_s}} \\] <p>This results in an eclipse season every 173.31 days, where at least one solar or lunar eclipse is possible.</p>"},{"location":"computation/#4-anomalistic-month","title":"4. Anomalistic Month","text":"<p>The anomalistic month is the time for the Moon to return to perigee (the point closest to Earth), which impacts whether a solar eclipse will be total or annular:</p> \\[ T_a = 27.55455 \\text{ days} \\]"},{"location":"computation/#5-saros-cycle","title":"5. Saros Cycle","text":"<p>The Saros cycle is a period after which similar eclipses will recur with almost identical geometry. It is approximately given by:</p> \\[ T_{\\text{Saros}} = 18 \\times T_y + 10 + \\frac{1}{3} \\text{ days} \\] <p>where \\( T_y \\) represents the tropical year (365.2422 days). This means similar eclipses occur roughly every 18 years, 11 days, and 8 hours.</p>"},{"location":"computation/#6-angular-separation-for-eclipse-occurrence","title":"6. Angular Separation for Eclipse Occurrence","text":"<p>For an eclipse to occur, the angular separation between the Moon and the Sun, as viewed from Earth, must fall within a critical limit:</p> \\[ \\Delta \\theta = \\left| \\theta_{\\text{Sun}} - \\theta_{\\text{Moon}} \\right| &lt; \\theta_{\\text{limit}} \\] <p>where:</p> <ul> <li>\\( \\theta_{\\text{Sun}} \\) and \\( \\theta_{\\text{Moon}} \\) are the Sun\u2019s and Moon\u2019s angular positions relative to Earth,</li> <li>\\( \\theta_{\\text{limit}} \\) is the maximum separation within which an eclipse is possible (approximately \\( 15^\\circ \\)).</li> </ul>"},{"location":"computation/#7-spherical-trigonometry-for-celestial-positioning","title":"7. Spherical Trigonometry for Celestial Positioning","text":"<p>Precise eclipse predictions require calculating the exact positions of the Sun, Moon, and Earth using spherical trigonometry:</p> \\[ \\cos(\\theta) = \\sin(\\delta_1) \\sin(\\delta_2) + \\cos(\\delta_1) \\cos(\\delta_2) \\cos(\\alpha_1 - \\alpha_2) \\] <p>where:</p> <ul> <li>\\( \\theta \\) is the angle between two celestial objects,</li> <li>\\( \\delta_1 \\) and \\( \\delta_2 \\) are their declinations (angular distance from the celestial equator),</li> <li>\\( \\alpha_1 \\) and \\( \\alpha_2 \\) are their right ascensions (angular distance measured along the celestial equator).</li> </ul>"},{"location":"computation/#summary","title":"Summary","text":"<p>Combining these cycles\u2014synodic, draconic, anomalistic months, and the Saros cycle\u2014with precise geometry allows for accurate eclipse prediction.</p>"},{"location":"cookiecutter/","title":"cookiecutter","text":"<ul> <li>cookiecutter is a folder template</li> <li>this repo is a cookiecutter</li> <li>it is so simple it is stupid that everyone has overlooked this</li> <li>I believe this spawned from the django web framework app spawn command</li> </ul>","tags":["cookiecutter"]},{"location":"cookiecutter/#screencast","title":"screencast","text":"","tags":["cookiecutter"]},{"location":"cookiecutter/#cookiecutterjson","title":"<code>cookiecutter.json</code>","text":"<ul> <li>here is the <code>cookiecutter.json</code> file that deploys this project</li> </ul> <pre><code>{\n    \"proj_name\": \"project name\",\n    \"release_date\": \"{% now 'local' %}\",\n    \"version\": \"0.1.0\"\n}\n</code></pre> <ul> <li>these values provide variables with defaults</li> <li>they also become a command line prompt during deployment to override the defaults</li> <li>beyond this, these values can be used in folder &amp; file names</li> <li>and inside files</li> <li>the format to reuse these variables</li> </ul> <pre><code>{{ cookiecutter.&lt;variable name&gt; }}\n</code></pre> <ul> <li>your project can contain anything you want</li> <li>multiple languages</li> <li>pre and post hooks are included to run commands before or after folder deployment</li> </ul>","tags":["cookiecutter"]},{"location":"cookiecutter/#cookiecutter-command","title":"cookiecutter command","text":"<ul> <li>you can also list your installed templates <code>cookiecutter -l</code> among other options</li> </ul> <pre><code>Usage: cookiecutter [OPTIONS] [TEMPLATE] [EXTRA_CONTEXT]...\n\n  Create a project from a Cookiecutter project template (TEMPLATE).\n\n  Cookiecutter is free and open source software, developed and managed by\n  volunteers. If you would like to help out or fund the project, please get in\n  touch at https://github.com/cookiecutter/cookiecutter.\n\nOptions:\n  -V, --version                Show the version and exit.\n  --no-input                   Do not prompt for parameters and only use\n                               cookiecutter.json file content\n  -c, --checkout TEXT          branch, tag or commit to checkout after git\n                               clone\n  --directory TEXT             Directory within repo that holds\n                               cookiecutter.json file for advanced\n                               repositories with multi templates in it\n  -v, --verbose                Print debug information\n  --replay                     Do not prompt for parameters and only use\n                               information entered previously\n  --replay-file PATH           Use this file for replay instead of the\n                               default.\n  -f, --overwrite-if-exists    Overwrite the contents of the output directory\n                               if it already exists\n  -s, --skip-if-file-exists    Skip the files in the corresponding directories\n                               if they already exist\n  -o, --output-dir PATH        Where to output the generated project dir into\n  --config-file PATH           User configuration file\n  --default-config             Do not load a config file. Use the defaults\n                               instead\n  --debug-file PATH            File to be used as a stream for DEBUG logging\n  --accept-hooks [yes|ask|no]  Accept pre/post hooks\n  -l, --list-installed         List currently installed templates.\n  -h, --help                   Show this message and exit.\n</code></pre>","tags":["cookiecutter"]},{"location":"cookiecutter/#using-a-local-folder-without-git","title":"using a local folder without git","text":"<ul> <li>this repository has a <code>template/</code> folder</li> <li>you do not have to learn git or use a git repository to use cookiecutte</li> <li>it contains a bare minimum cookiecutter template</li> <li>this is how you can run cookiecutter locally</li> </ul> <pre><code>cookiecutter template/\n# then it prompts you\nproj_name [project name]: example\nvariable_a [variable a]: abc\nvariable_b [variable b]: def\nrelease_date [2023-10-05]: \nversion [0.1.0]: \n</code></pre>","tags":["cookiecutter"]},{"location":"cookiecutter/#empty-template","title":"empty template","text":"<ul> <li>there is a bare minimum cookiecutter template in <code>templat/</code></li> <li>you can reuse it in your project or deploy it by itself</li> </ul> <pre><code>cookiecutter https://github.com/shane0/workflow --directory template/\n</code></pre>","tags":["cookiecutter"]},{"location":"cookiecutter/#cucumber-rule-cookiecutter","title":"cucumber rule cookiecutter","text":"<pre><code>cookiecutter https://github.com/shane0/workflow --directory rule\n</code></pre>","tags":["cookiecutter"]},{"location":"deploy/","title":"deployment","text":"<ul> <li>after deployment you can add more options found here</li> <li>https://github.com/shane0/workflow </li> </ul>","tags":["cookiecutter","deployments"]},{"location":"deploy/#screencast","title":"screencast","text":"","tags":["cookiecutter","deployments"]},{"location":"deploy/#deploying-the-first-time","title":"deploying the first time","text":"<ul> <li>on a new machine</li> <li>install cookiecutter</li> <li>deploy this cookiecutter the first time<sup>1</sup></li> </ul> <pre><code>cookiecutter https://github.com/shane0/workflow\n</code></pre>","tags":["cookiecutter","deployments"]},{"location":"deploy/#deploying-seubsequently","title":"deploying seubsequently","text":"<ul> <li>after you have used it once you can just use it by name</li> </ul> <pre><code>cookiecutter workflow \n</code></pre>","tags":["cookiecutter","deployments"]},{"location":"deploy/#empty-cookiecutter-template","title":"empty cookiecutter template","text":"<pre><code>cookiecutter https://github.com/shane0/workflow --directory template/\n</code></pre>","tags":["cookiecutter","deployments"]},{"location":"deploy/#recent-deployments","title":"recent deployments","text":"<ul> <li>2023-09-17: buddhism mkdocs</li> <li>added some docs here for the optional mkdocs github deployment</li> <li>2023-09-19: cheatsheets and snippets</li> </ul> <ol> <li> <p>note: by default cookiecutter  saves a copy of this template in  <code>~/.cookiecutters/workflow/</code> the first time you use\u00a0\u21a9</p> </li> </ol>","tags":["cookiecutter","deployments"]},{"location":"django/","title":"django","text":"<ul> <li>django website with an api kubernetes</li> <li>this eexample is hosted on azure</li> </ul>"},{"location":"failover/","title":"failover","text":""},{"location":"failover/#deployment","title":"deployment","text":"<pre><code>graph LR \ncookiecutter --&gt; script</code></pre>"},{"location":"failover/#docs","title":"docs","text":"<pre><code>graph LR \nmkdocs --&gt; pdf\npdf --&gt; markdown </code></pre>"},{"location":"failover/#command-line","title":"command line","text":"<pre><code>graph LR \nclick_ --&gt; alias </code></pre>"},{"location":"files/","title":"file structure","text":"<ul> <li>homepage: <code>docs/index.md</code> the home page for the local mkdocs server</li> <li>small tasks: <code>docs/todo.md</code>  this displays your command line task list</li> <li><code>todocli/todo.txt</code> and <code>todocli/done.txt</code></li> <li>sub projects or related project folders: <code>docs/projects.md</code> </li> <li>examples: you start a project folder leave the command to open it in vscode <code>code &lt;your sub project folder&gt;/</code></li> <li>links to relevant web addresses or network storage, related files etc.</li> <li><code>docs/workflow.md</code></li> <li>keep notes where things hare</li> <li>imagine you revisit your folder in the future and do not remember what the folder is for, this file will get you started in the right direction so whatever you work on</li> </ul>","tags":["workflow"]},{"location":"first/","title":"first principles","text":"<p>Here\u2019s a more detailed 7-step process for first principles thinking:</p> <ol> <li>Define the Problem Clearly:</li> <li> <p>Begin by clearly understanding and stating the problem you're trying to solve or the question you're investigating.</p> </li> <li> <p>Gather Existing Knowledge and Assumptions:</p> </li> <li> <p>Identify the current information, beliefs, or practices around this issue. What do people generally assume is true?</p> </li> <li> <p>Challenge Every Assumption:</p> </li> <li> <p>Systematically question these assumptions. Ask yourself why things are done a certain way and if these assumptions are necessary or true.</p> </li> <li> <p>Break Down the Problem to its Basic Elements:</p> </li> <li> <p>Isolate the most fundamental truths that are objectively verifiable and undeniable. Strip away any excess complexity to get to the root of the issue.</p> </li> <li> <p>Understand Why These Fundamentals are True:</p> </li> <li> <p>Validate why the basic elements you've identified are true. Are they based on evidence, or are they assumptions that you mistakenly accepted?</p> </li> <li> <p>Reconstruct from First Principles:</p> </li> <li> <p>Build your understanding or solution from the ground up, using only the core truths identified in the previous steps. Work upwards logically without letting conventional thinking influence your approach.</p> </li> <li> <p>Develop and Test New Solutions:</p> </li> <li>Once you\u2019ve restructured the problem using first principles, brainstorm novel solutions and test them rigorously. The goal is to arrive at approaches that are more efficient, innovative, or accurate based on your fresh understanding. </li> </ol> <p>This expanded process encourages deeper analysis and critical thinking at each step.</p>"},{"location":"github_pages/","title":"github pages (wip)","text":"<ul> <li>on https://github.com/shane0</li> <li>create an empty github repo</li> <li>on the laptop</li> <li>deploy the workflow template</li> </ul> <pre><code>code &lt;name of project&gt;\nmks\n# edit your mkdocs site\n# one time upload\n./upload.sh\nmv upload.sh utils/\n</code></pre> <p>cookiecutter workflow</p> <p>```</p> <ul> <li>run the included script <code>upload.sh</code></li> <li>copy the code for uploading a new folder</li> </ul>"},{"location":"github_pages/#2023-09-17","title":"2023-09-17","text":"<ul> <li>https://shane0.github.io/buddhism/</li> <li>pipeline fails:</li> <li>mike</li> <li>ERROR   -  Config value 'plugins': The \"glightbox\" plugin is not installed</li> <li>mkdocs-git-revision-date-localized-plugin missing</li> </ul>"},{"location":"glossary/","title":"glossary","text":"","tags":["glossary"]},{"location":"glossary/#mkdocs-glossary","title":"mkdocs glossary","text":"<ul> <li>mouse over this word to see the definition: PRAJNA</li> <li>that is provided site wide</li> <li>to add terms use all caps and add the word to <code>includes/abbreviations.md</code></li> </ul>","tags":["glossary"]},{"location":"glossary/#gitlab-feature-glossary-template","title":"gitlab feature glossary template","text":"<pre><code>## FeatureName glossary\n\nThis glossary provides definitions for terms related to FeatureName.\n\n| Term   | Definition              | Additional category |\n|--------|-------------------------|---------------------|\n| Term A | Term A does this thing. |                     |\n| Term B | Term B does this thing. |                     |\n| Term C | Term C does this thing. |                     |\n</code></pre>","tags":["glossary"]},{"location":"keyboards/","title":"keyboards","text":"<ul> <li>go here for a minute and come back https://shop.keyboard.io/</li> <li>there are many other custom keyboards but these are easy for beginners</li> <li>go here to see the software that can program a keyboard </li> <li>https://github.com/keyboardio/Chrysalis</li> </ul>"},{"location":"keyboards/#programmable-keyboards","title":"programmable keyboards","text":"<ul> <li>A PROGRAMMABLE KEYBOARD CAN MOVE A KEY TO YOUR FINGER</li> <li>a stupid keyboard makes you move a finger to the key</li> <li>or worse to the mouse or a numpad</li> <li>you can have layers of keys </li> </ul>"},{"location":"keyboards/#why-todays-keyboards-are-absurd","title":"why todays keyboards are absurd","text":"<ul> <li>your keyboard was designed by morons decades ago</li> <li>the keys are all slanted this way \\\\\\\\</li> <li>hands slant this way ///// \\\\\\</li> <li>humans rose to the top of the food chain because of thumbs</li> <li>thumbs are like this / \\</li> <li>but your space bar is like this ____</li> <li>your thumbs are not reaching their full potential</li> <li>the reason the keys are slanted is a problem introduced by mechanical typewriters</li> <li>someone moved all the keys randomely because there were metal bars under the keys</li> <li>a real solution should have been to move the bars not the keys </li> <li>computers are digital now there are no bars!</li> </ul>"},{"location":"linus_torvalds/","title":"linus torvalds","text":""},{"location":"linus_torvalds/#data-structure-dictates-code","title":"data structure dictates code","text":"<ul> <li>https://medium.com/webdevops/data-structures-548cbea9c520</li> </ul> <p>I\u2019m a huge proponent of designing your code around the data, rather than the other way around, and I think it\u2019s one of the reasons git has been fairly successful\u2026 I will, in fact, claim that the difference between a bad programmer and a good one is whether he considers his code or his data structures more important. Bad programmers worry about the code. Good programmers worry about data structures and their relationships.</p>"},{"location":"linus_torvalds/#good-data-structure","title":"good data structure","text":""},{"location":"linus_torvalds/#examples","title":"examples","text":"<ul> <li>Eric Raymond\u2019s \u201cRule of Representation\u201d from 2003:</li> <li>Fold knowledge into data, so program logic can be stupid and robust.</li> </ul>"},{"location":"lock_in/","title":"tech lock","text":"<ul> <li>mahy people waste their life working for a computer</li> <li>they were designed to do work for you not make you do it</li> <li>learn to program and stay in the command line when possible and you will live a better life</li> <li>there is no excuse now to not learn to make a computer work for you</li> <li>some solutions &amp; sites about tech lock in</li> <li>life is short don't waste your time on nonsense like tech lock in</li> </ul> Website Link Name Description killedbygoogle.com Killed by Google Catalogs Google products and services discontinued over the years. mcbroken.com McBroken Tracks the status of McDonald's ice cream machines globally. right-to-repair.org Right to Repair Advocates for the right to repair electronics and machinery, including John Deere tractors. fixmystreet.com Fix My Street Enables citizens to report local street issues to authorities in the UK. repair.org Repair.org Organizes efforts to promote Right to Repair legislation globally. monopolies.dev Monopolies.dev Highlights tech monopolies and their restrictive practices. alternativeto.net AlternativeTo Provides user-recommended alternatives to popular apps and software. openbenches.org Open Benches Crowdsources the locations and details of public memorial benches. wikileaks.org WikiLeaks Publishes classified and censored information provided by whistleblowers. haveibeenpwned.com Have I Been Pwned Lets users check if their data has been part of a security breach. rutracker.org RuTracker Russian tracker for digital files often locked behind paywalls or inaccessible. nosfer.app NOSFER Decentralized app catalog countering centralized app stores like Apple's or Google's. letsencrypt.org Let\u2019s Encrypt Provides free SSL/TLS certificates to secure websites. archive.org Internet Archive Digital library offering free access to billions of books, movies, software, and websites. degoogle.jmoore.dev Degoogle Yourself Resources for reducing reliance on Google services. themarkup.org The Markup Investigates technology's influence on society. glassdoor.com Glassdoor Allows employees to anonymously review companies and their work environments. publicdomainreview.org Public Domain Review Showcases works that have entered the public domain. goodreads.com Goodreads A platform to track, share, and review books outside of proprietary bookstores. tinkercad.com Tinkercad Advocates open design by providing free 3D modeling tools for creators. Website Year Created Tech Lock-In Cause Facebook 2004 Network effects and social graph lock-in. Twitter 2006 Dependency on unique, centralized short-form social communication. YouTube 2005 Content ecosystem requiring its hosting and distribution infrastructure. Instagram 2010 Network effects in photo-sharing and integrated mobile experiences. Snapchat 2011 Ephemeral messaging with locked-in user base via unique filters/features. TikTok 2016 Algorithm-driven content ecosystem unique to its app experience. WhatsApp 2009 Messaging lock-in via wide adoption and encryption protocols. Spotify 2006 Music library access tied to proprietary streaming agreements. iCloud 2011 Apple ecosystem lock-in through seamless device integration. Google Drive 2012 File storage and sharing tied to Google account integration. Zoom 2011 Video conferencing dominance through specific enterprise integrations. LinkedIn 2003 Professional networking reliant on its entrenched business profiles. GitHub 2008 Development collaboration based on proprietary Git hosting services. AWS Marketplace 2012 Cloud services tethering businesses to Amazon ecosystem. Salesforce 1999 (relevant) CRM lock-in through proprietary APIs and third-party app reliance. WordPress 2003 CMS dominance due to plugin ecosystem and hosting lock-in. Wix 2006 Website building tied to its hosted infrastructure. Netflix 2007 Streaming lock-in via exclusive licensing agreements and original content. Shopify 2006 E-commerce lock-in through app ecosystem and integrated payments. Slack 2013 Team communication reliant on proprietary integrations and APIs. Event Year Details Microsoft blocked Office 365 competitors with restrictive contracts 2019 Made software harder to use on non-Azure platforms, driving cloud lock-in. \u30105\u3011\u30106\u3011 European Union fines for anticompetitive cloud practices 2020 EU accused Microsoft of unfair licensing to hinder competitors like AWS. \u30105\u3011 VA forced into Azure through restrictive Microsoft licensing 2021 Veterans Affairs spent $1.6B without meaningful competition due to vendor lock-in. \u30107\u3011 Cloud exit fees soared for leaving Azure 2022 Microsoft imposed hefty penalties, making it costly to leave its ecosystem. \u30106\u3011 Teams bundled with Office, stifling Slack competition 2020 Microsoft faced investigations for unfairly bundling its software. \u30105\u3011\u30107\u3011 Surface Hub exclusive to Teams 2018 Hardware only compatible with Microsoft services, excluding other conferencing tools. \u30105\u3011 Windows preloads limited user choice Ongoing OEMs locked into shipping Windows by default, limiting Linux or other OS options. \u30106\u3011 UK government Azure exclusivity 2023 Contract terms limited options for using non-Microsoft services, affecting public funds. \u30106\u3011 Azure AD enforced for Microsoft apps 2022 Popular apps required Azure for authentication, marginalizing alternatives. \u30105\u3011 Skype deprecation to push Teams 2020 Microsoft sunset Skype for Business to drive Teams adoption. \u30106\u3011 Microsoft pushed DirectX API changes 2017 Favored its gaming ecosystem, making alternatives like OpenGL less viable. \u30106\u3011 OneDrive made incompatible with third-party file managers 2021 Limited user options to integrate cloud services. \u30105\u3011 Internet Explorer legacy dependencies enforced Ongoing Many organizations locked into IE-compatible intranet apps. \u30106\u3011 Microsoft cloud data export fees Ongoing High costs penalized customers moving data to competing clouds. \u30106\u3011 Windows 11 TPM requirements 2021 Hardware locks excluded non-compliant machines, pushing new purchases. \u30105\u3011 Azure discounts conditional on full commitment Ongoing Conditional pricing favored long-term lock-in over flexibility. \u30106\u3011 Cortana\u2019s deep Windows integration 2019 Forced adoption as default voice assistant in Windows builds. \u30106\u3011 Office perpetual licensing phased out 2021 Drove users to Office 365 subscriptions instead of one-time purchases. \u30107\u3011 Windows Server forced renewal terms Ongoing Limited use outside Azure, driving continued reliance on Microsoft services. \u30105\u3011\u30107\u3011 DirectStorage API exclusivity 2022 Tied cutting-edge game performance to Windows, sidelining Linux or macOS. \u30106\u3011 # Event Description Year 1 Windows XP End-of-Life Microsoft ended support for Windows XP, leaving organizations locked into outdated, insecure systems. 2014 2 Adobe Flash End-of-Life Adobe phased out Flash, forcing many web developers to transition hastily to newer standards. 2020 3 Internet Explorer Dependency Organizations remained locked into using outdated Internet Explorer versions for legacy applications. 2010s 4 Printer DRM Printer manufacturers embedded DRM in ink cartridges, locking users into buying overpriced, brand-specific replacements. Ongoing 5 Tesla Charging Standard Tesla used proprietary charging plugs, causing difficulties for owners of other EV brands until wider adapter support emerged. 2010s 6 Apple Lightning Cables Apple's use of Lightning cables for iPhones forced consumers into buying expensive proprietary chargers. 2012+ 7 Amazon Kindle Format Lock-in Kindle e-readers supported proprietary formats, locking users into Amazon's ecosystem for books. Ongoing 8 Digital Cameras with Proprietary Formats Some camera manufacturers used proprietary RAW formats, complicating workflows for photographers. Ongoing 9 Google Stadia's Failure Google's gaming service lacked support for transferring purchases to other platforms, leaving users stranded upon shutdown. 2022 10 Proprietary IoT Platforms Smart home devices locked users into specific ecosystems, such as Amazon Alexa or Google Home. Ongoing 11 Microsoft Office File Format Wars Continued reliance on proprietary DOCX and XLSX formats hampered interoperability with free alternatives like LibreOffice. Ongoing 12 Epic vs. Steam Ecosystem Wars Gamers faced fragmentation due to exclusivity deals locking games into Epic or Steam platforms. Ongoing 13 TikTok Algorithms Content creators became locked into TikTok due to its unique algorithm favoring specific formats and behaviors. Ongoing 14 Ride-Share App Exclusivity Uber and Lyft locked drivers and riders into specific ecosystems through pricing models and app exclusivity. 2010s 15 Social Media Account Recovery Issues Facebook and Google users struggled to recover accounts due to dependency on their platforms' unique processes. Ongoing 16 Broadband Monopoly ISPs in the U.S. often monopolized regions, forcing customers into limited service options without alternatives. Ongoing 17 Crypto Wallet Lock-in Users lost funds due to reliance on specific, incompatible cryptocurrency wallets. Ongoing 18 Streaming Exclusivity Wars Platforms like Netflix, Disney+, and HBO Max locked content behind exclusive paywalls, fragmenting entertainment access. 2010s+ 19 Tesla Autopilot Updates Tesla customers were locked into Tesla's ecosystem to access critical software updates for self-driving features. Ongoing 20 Zoom's Videoconferencing Domination Companies became dependent on Zoom during the pandemic, with limited integration across other platforms. 2020 # Event Description 1 QWERTY Keyboard The QWERTY layout was designed to prevent typewriter jams, not for efficiency. 2 VHS vs Betamax VHS won despite Betamax being technically superior, due to marketing and licensing. 3 HD-DVD vs Blu-Ray HD-DVD was technically better, but Blu-Ray won due to Sony's dominance and exclusive content deals. 4 Windows Vista Despite its many flaws and poor performance, Microsoft pushed it for years, locking users into bad software. 5 Apple's 30-pin Dock Connector Apple forced users to adopt a proprietary connector, only to replace it with Lightning years later. 6 Sony's MiniDisc Sony\u2019s proprietary MiniDisc format was locked into their ecosystem, but was eclipsed by MP3 players. 7 Google Glass Early adoption of wearable tech led to failure due to privacy concerns and impractical design. 8 The Concorde Supersonic Jet A technological marvel that became financially unsustainable, locking in expensive air travel. 9 Microsoft Internet Explorer Microsoft included Internet Explorer as the default browser on Windows, forcing users into a subpar browser. 12 Apple's \"Antennagate\" Apple's iPhone 4 antenna design was flawed, locking users into defective products. 13 LaserDisc A high-quality video format that failed to gain traction, locked in by high cost and poor convenience. 14 Betamax's Blockbuster Agreement Blockbuster's exclusive deal with VHS over Betamax kept VHS the dominant format, even though Betamax was superior. 15 Windows XP's continued dominance Despite many technical advancements in the 2000s, Windows XP stayed locked in as the dominant OS for too long, even when outdated. 16 The Great Network Effect of MySpace MySpace's dominance was locked in by early social network usage patterns, preventing the platform from improving. 17 IBM PC Jr. IBM's attempt to enter the personal computer market was doomed by its own proprietary technology, and poor design decisions. 18 The Gold Standard A rigid monetary system that locked economies into a limited supply of gold, restricting growth and flexibility. 19 Beta Testing in Early Internet Era Tech companies relied on their early users to test unstable software, often locking them into broken systems. 20 The Tower of Babel (Language Lock-in) The construction of the Tower of Babel led to the \"lock-in\" of human communication through language barriers. <p>This table highlights 20 real historical events that exhibit how technology lock-in, bad design choices, or poor execution led to failures or long-lasting consequences in tech history.</p>"},{"location":"lock_in/#childish-patents","title":"childish patents","text":"<ul> <li>adults fight over things using patents</li> <li>overall it slows down progress for humanity</li> </ul> Patent Name/Description Patent Number Why It's Childish \"Interactive Virtual Pet\" U.S. Patent 6,491,607 A patent for a virtual pet on a computer, reminiscent of Tamagotchi. \"Method of Swinging on a Swing\" U.S. Patent 6,368,227 An algorithm for optimizing the motion of swinging, making playtime \"efficient.\" \"Digital Kisses\" U.S. Patent 7,089,952 A system to send virtual kisses through a mobile device\u2014romantic or childish? \"Toy Simulation Device\" U.S. Patent 6,429,846 A software simulation of toy functions, effectively turning play into code. \"Storyline Creation for Interactive Media\" U.S. Patent 5,935,223 A patent for creating choose-your-own-adventure stories in software. \"Apple Patenting Round Corners\" U.S. Patent D670,286 Apple's famous design patent for devices with rounded corners. \"Mood Detection Through Emojis\" U.S. Patent 9,235,989 Detecting user mood through emoji usage\u2014a playful take on emotions in text. \"Digital Sandbox for Kids\" U.S. Patent 8,910,789 Software that simulates playing in a sandbox, bringing physical play to digital. \"Virtual Bubble Wrap\" U.S. Patent 6,377,191 A software-based bubble wrap simulator for popping virtual bubbles. \"Virtual Paper Airplane Game\" U.S. Patent 7,756,755 Simulating the throwing of paper airplanes in a virtual environment."},{"location":"lock_in/#certifcation","title":"certifcation","text":"<ul> <li>for a while there were computer certificates you could buy</li> <li>they were notorious for having test questions with multiple \"right\" answers</li> <li>a way that works and a \" way\" that you would not know unless you paid for special proprietary test preparation classes or books or even subscription based training? <li>this also happens in tech interviews, there are sites and software corporations use to exclude people unless they know the latest questions that you only see if you pay various tech training interview prep sites</li>"},{"location":"lock_in/#requiring-additional-purchases","title":"requiring additional purchases","text":"<ul> <li>disabling a feaature that is useful &amp; licening pieces of products</li> </ul>"},{"location":"lock_in/#more-examples","title":"more examples","text":"<ul> <li>medical software that requires expensive hardware or software</li> <li>gets cut when executives cut budgets</li> <li>dies or is killed intentionally by the provider</li> <li>remember political parties recieve billions every year from corporations</li> <li>government involvement often forces tech lock in in multiple industries</li> <li>legislation gets passed requiring purchases or accreditation</li> <li>software i have seen with updates with breaking changes</li> <li>az cli</li> <li>azure keyvault library</li> <li>oracle db</li> <li>enforced specific programming language requirements</li> <li>some software companies are owned and ran by non technical people</li> <li>they buy software just to kill it to monopolize or otherwise dominate an industry</li> </ul>"},{"location":"lock_in/#solutions","title":"solutions","text":"<ul> <li>the easiest thing is to stay in the command line and stick with a few programming languages</li> <li>linus torvalds built the kernel and git all he has installed on his laptop is a terminal and a browser</li> <li>this site is packed with solutions</li> <li>chat bots exist now</li> <li>so there is no excuse or reason not to learn to program yourself</li> <li>programmable keyboards: you should use this because its stupid fast</li> <li>vim: you should use this because its stupid fast</li> <li>markdown: you should use this because its stupid fast</li> <li>they are all easy to learn</li> <li>markdown: easily be converted to pdf html</li> <li>markdown: easily converted to slideshows flash cards</li> <li>mkdocs</li> <li>python click</li> <li>python cookiecutter</li> <li>excel: open office learn a db csv or python pandas</li> <li>sharepoint: mkdocs</li> <li>task management: todocli</li> <li>linux</li> </ul>"},{"location":"lock_in/#other-rackets","title":"other rackets","text":"<ul> <li>this is a story in itself</li> <li>a racket is when a group creates a problem to sell a fake solution</li> <li>this is how the mafia would operate</li> <li>mob tells thieves what businesses they can rob</li> <li>theives give the mob their cut</li> <li>the mob comes in demands money for \"protection\"</li> <li>this poison has infected every nation and global corporation</li> <li>pollution is particularly profitable</li> <li>think about this: anytime there is a problem and things went wrong, something broke, lost luggage, disasters, medical problems, food shortages, any scarcity or any inconvenience people fork out money to get rid of, often has a racket surrounding it</li> <li>why is this?  when anything becomes more expensive that generates profit, someone collects more when something is expensive</li> <li>example: overall tax collection, everything is taxed so when any process becomes more expensive then more tax is collected</li> <li>example: global investors, take lost luggage, i recently had this happen and it seems to be a growing problem, an entire plane full of luggage had to be shipped overnight, global investors invest accross the board so they profit any time something costs more overall so they intentionally or unintentionally create problems</li> <li>example: non profits which are often hospitals who grandfathered in non profit status due to originally being religious charity organizations will spend money for no other reason than to perpetuate their budget otherwise a given departments annual budget drops</li> </ul>"},{"location":"lock_in/#use-it-or-lose-it-budgeting","title":"use-it-or-lose-it budgeting","text":""},{"location":"lock_in/#explanation","title":"Explanation","text":"<p>Organizations, particularly those with annual budgets, may have funds that do not roll over to the next fiscal year. If the allocated budget is not fully spent, the unspent amount might lead to reduced allocations in the following year. To avoid this, departments or teams often rush to spend leftover funds on unnecessary items or services before the fiscal year ends, even if the expenses aren't essential.</p>"},{"location":"lock_in/#example-contexts","title":"Example Contexts","text":"<ul> <li>Government and Public Sector: Departments might spend on office supplies, technology upgrades, or unneeded contracts to avoid future budget cuts.</li> <li>Corporate Settings: Teams may purchase equipment or organize events late in the year to use their remaining funds.</li> </ul> <p>This behavior can lead to inefficiency and waste, as the spending is driven by budgetary incentives rather than organizational needs.</p>"},{"location":"lock_in/#planned-obsolescence","title":"planned obsolescence","text":""},{"location":"lock_in/#explanation_1","title":"Explanation","text":"<p>Planned obsolescence involves designing products with a limited useful life or ensuring that certain components are incompatible with future models. This strategy encourages consumers to purchase new products more frequently, boosting sales but often frustrating customers and generating more waste.</p>"},{"location":"lock_in/#types-of-planned-obsolescence","title":"Types of Planned Obsolescence","text":"<ol> <li>Technical Incompatibility: Designing parts or accessories (like chargers or components) so they won't work with newer versions of the product.</li> <li>Example: Changing connector designs to force consumers to buy new accessories.</li> <li>Perceived Obsolescence: Updating designs or features to make older models appear outdated, even if they're still functional.</li> <li>Example: Cosmetic changes that encourage style-conscious consumers to upgrade.</li> <li>Limited Repairability: Making products hard or expensive to repair, pushing customers to buy replacements instead.</li> <li>Example: Using proprietary screws or sealing components to prevent easy fixes.</li> </ol> <p>Planned obsolescence is often criticized for being anti-consumer and environmentally harmful, leading to movements advocating for \"right to repair\" and sustainable design practices.</p>"},{"location":"lock_in/#perverse-incentives-or-profit-driven-problem-perpetuation","title":"perverse incentives or profit-driven problem perpetuation","text":""},{"location":"lock_in/#explanation_2","title":"Explanation","text":"<p>Perverse incentives occur when organizations or industries have financial motivations to maintain or exacerbate a problem rather than solve it. Solving the problem would eliminate the source of ongoing profits, so the incentive structure discourages resolution.</p>"},{"location":"lock_in/#examples","title":"Examples","text":"<ol> <li>Healthcare: A focus on treatments rather than cures because chronic illnesses generate recurring revenue.</li> <li>Planned Obsolescence: Designing products to wear out prematurely so customers must buy replacements.</li> <li>Environmental Issues: Companies profiting from pollution-heavy practices may resist adopting cleaner technologies, as addressing the problem could reduce profits.</li> <li>Subscription Models: Offering temporary fixes or partial solutions to problems (e.g., software bugs or feature limitations) to encourage recurring payments.</li> </ol>"},{"location":"lock_in/#alternate-terms","title":"Alternate Terms","text":"<ul> <li>Conflict of Interest: When profit motives conflict with the ethical obligation to solve the problem.</li> <li>Rent-Seeking Behavior: When companies profit without adding value, often by exploiting a systemic issue.</li> <li>Problem Monetization: Turning ongoing issues into revenue streams without addressing root causes.</li> </ul> <p>These terms emphasize the economic and ethical challenges of such behavior.</p>"},{"location":"lock_in/#regulatory-capture-or-policy-exclusion","title":"regulatory capture or policy exclusion","text":"<ul> <li>highlights different aspects of how government regulations can inadvertently perpetuate problems or exclude certain groups.</li> </ul>"},{"location":"lock_in/#key-terms-and-explanations","title":"Key Terms and Explanations","text":"<ol> <li>Regulatory Capture </li> <li>What it means: When regulatory agencies are influenced or dominated by the industries or entities they are supposed to regulate, leading to rules that benefit specific groups at the expense of the public.</li> <li> <p>Example: Regulations that create high barriers to entry, favoring large, established companies while excluding smaller competitors or new entrants.</p> </li> <li> <p>Bureaucratic Inertia </p> </li> <li>What it means: The tendency of bureaucracies to resist change and stick with existing policies or processes, even if they are ineffective or harmful.</li> <li> <p>Example: Outdated licensing laws that prevent skilled workers from entering certain professions.</p> </li> <li> <p>Policy Exclusion </p> </li> <li>What it means: When regulations unintentionally or intentionally exclude certain populations or create unequal access to resources.</li> <li> <p>Example: Zoning laws that limit affordable housing, excluding low-income residents from certain areas.</p> </li> <li> <p>Unintended Consequences </p> </li> <li>What it means: When well-intentioned regulations result in outcomes that exacerbate the original problem or create new ones.</li> <li> <p>Example: Overly strict environmental regulations that drive businesses to relocate to less-regulated regions, increasing global emissions.</p> </li> <li> <p>Legal Pluralism </p> </li> <li>What it means: When overlapping or conflicting regulations create confusion and inefficiencies, making it difficult for individuals or organizations to comply or benefit.</li> <li>Example: Contradictory local and federal policies on cannabis use that exclude certain groups from participating in legal markets.</li> </ol> <p>These terms reflect how regulations can sometimes serve entrenched interests, become outdated, or fail to address systemic inequities.</p>"},{"location":"lock_in/#disaster-capitalism-or-profiteering-from-crises","title":"disaster capitalism or profiteering from crises","text":"<ul> <li>examples: insurance fake food proprietary hardware or software</li> </ul>"},{"location":"lock_in/#explanation_3","title":"Explanation","text":"<ul> <li>Disaster Capitalism: Coined by author Naomi Klein, this term refers to the practice of capitalizing on crises (natural disasters, economic crashes, or pandemics) to push through policies or business strategies that increase profits, often at the expense of those affected.</li> <li>Profiteering from Crises: Refers to deriving excessive or opportunistic profits from disastrous events, often seen as ethically questionable.</li> </ul>"},{"location":"lock_in/#why-its-relevant","title":"Why It's Relevant","text":"<p>In the case of a CEO excited about disasters increasing insurance policy sales:</p> <ul> <li>Natural disasters lead to heightened awareness of risk, prompting more people to purchase insurance.</li> <li>While legitimate business operations might expand during such times, celebrating the disasters themselves can reveal a prioritization of profit over empathy or social responsibility.</li> </ul>"},{"location":"lock_in/#related-terms","title":"Related Terms","text":"<ol> <li>Moral Hazard: When a company benefits from a risky or harmful situation without bearing the consequences (e.g., benefiting from increased risk awareness without addressing systemic risks).</li> <li>Crisis Exploitation: Using a crisis as an opportunity to boost profits or implement strategies that wouldn't be accepted otherwise.</li> <li>Ethical Blindness: Failing to consider the ethical implications of benefiting from others' misfortunes.</li> </ol>"},{"location":"lock_in/#data-colonialism-or-digital-colonialism","title":"data colonialism or digital colonialism","text":"<ul> <li>captch was and still is using the public to train ocr character recognition and audio recognition and image recognition</li> <li>chat bots are colonizing users</li> <li>any software that reports home</li> <li>vscode telemetry</li> <li>all of googles products the browser</li> <li>operating systems</li> </ul>"},{"location":"lock_in/#explanation_4","title":"Explanation","text":"<ul> <li>Data Colonialism: A concept that draws parallels between historical colonialism and the modern extraction of data. In this context, users are seen as a resource to be \"mined\" for data, which is then used to train and improve proprietary software (e.g., AI models), often without fair compensation or consent.</li> <li>Digital Colonialism: Emphasizes the power imbalance where corporations dominate users and their digital environments, using them to fuel profit-driven algorithms while offering limited transparency or control.</li> </ul>"},{"location":"lock_in/#characteristics","title":"Characteristics","text":"<ol> <li>Exploitation of User Data:</li> <li>Users provide data (intentionally or unintentionally) that is used to train machine learning models, often without adequate compensation.</li> <li> <p>Example: Social media companies using uploaded photos to improve facial recognition algorithms.</p> </li> <li> <p>Asymmetrical Power Dynamics:</p> </li> <li>Users lack meaningful control over how their data is used or the ability to opt out.</li> <li> <p>Example: Free software or services that monetize user activity instead of offering fair trade-offs.</p> </li> <li> <p>Opaque Consent Mechanisms:</p> </li> <li>Terms of service agreements often bury data usage details, making it difficult for users to fully understand their participation.</li> <li>Example: AI chatbots improving their language models by analyzing user conversations without explicit consent.</li> </ol>"},{"location":"lock_in/#related-terms_1","title":"Related Terms","text":"<ol> <li>Surveillance Capitalism: The commodification of personal data for profit, often without users' full understanding or agreement.</li> <li>Crowdsourced Labor: When users unwittingly provide unpaid labor by interacting with software (e.g., solving CAPTCHAs to train AI models).</li> <li>Tech Colonialism: A broader term referring to global inequalities in how technology is developed, deployed, and exploited.</li> </ol> <p>These terms critique the extractive practices of modern software corporations and highlight the need for ethical frameworks in data usage.</p>"},{"location":"maze/","title":"maze","text":"<ul> <li>if you find yourself donw a rabbit hole or in the weeds start here</li> <li>mazes can be intentional or unintentional </li> <li>there are algorithms for following mazes that remove stress &amp; confusion</li> <li>mazes can be dynamic meaning the paths dead ends or exits move around</li> <li>a maze has an exit and if there is no exit then it is a trap</li> <li>mazes can have paths that are dead ends</li> <li>mazes can have paths that are detours, meaning they lead back to the path</li> <li>mazes can have more than one exist path and the shortest is preferred</li> </ul>","tags":["maze","troubleshooting"]},{"location":"maze/#breadcrumbs","title":"breadcrumbs","text":"<ul> <li>you can mark paths visited or unvisited</li> <li>you can mark forks visited or univsited </li> <li>you can mark visited forks exit or dead end or detour </li> <li>a complete breadcrumb takes someone else directly to the exit using the shortest path</li> </ul>","tags":["maze","troubleshooting"]},{"location":"maze/#follow-one-wall-method","title":"follow one wall method","text":"<ul> <li>follow one wall to its end it leads to one of three things: the escape, a dead end, or was a detour back to the path you were on</li> </ul>","tags":["maze","troubleshooting"]},{"location":"maze/#forks","title":"forks","text":"<ul> <li>if a path forks and you have vision follow the shortest fork first</li> </ul>","tags":["maze","troubleshooting"]},{"location":"maze/#unintentional-mazes","title":"unintentional mazes","text":"","tags":["maze","troubleshooting"]},{"location":"maze/#top-7-maze-algorithms-from-the-robot","title":"Top 7 Maze Algorithms from the robot","text":"<p>Note: The \"best\" algorithm often depends on the specific maze and desired outcome. Here are seven popular algorithms commonly used for maze solving:</p> <ol> <li>Depth-First Search (DFS):</li> <li>Traverses a graph or tree by going as deep as possible along each branch before backtracking.</li> <li> <p>Can be efficient for mazes with relatively few dead ends.</p> </li> <li> <p>Breadth-First Search (BFS):</p> </li> <li>Explores all nodes at a given depth before moving to the next depth level.</li> <li> <p>Often used to find the shortest path in a maze.</p> </li> <li> <p>Dijkstra's Algorithm:</p> </li> <li>Finds the shortest path between two nodes in a graph with weighted edges (e.g., representing distances or costs).</li> <li> <p>Useful for mazes where different paths have varying lengths or difficulties.</p> </li> <li> <p>A* Search:</p> </li> <li>A more efficient version of Dijkstra's algorithm that uses a heuristic function to estimate the distance to the goal.</li> <li> <p>Often used for mazes where finding the shortest path is important.</p> </li> <li> <p>Bidirectional Search:</p> </li> <li>Searches from both the start and goal nodes simultaneously, often leading to faster solutions.</li> <li> <p>Useful for mazes where the goal is known in advance.</p> </li> <li> <p>Iterative Deepening Depth-First Search:</p> </li> <li>A variation of DFS that avoids exploring paths that are too long.</li> <li> <p>Can be useful for mazes with large search spaces.</p> </li> <li> <p>Wall-Following Algorithms:</p> </li> <li>Follow the wall of the maze to find a path.</li> <li>Simple but can be inefficient for complex mazes.</li> </ol> <p>These are just a few of the many maze-solving algorithms available. The best choice for a particular maze depends on factors such as the maze's size, complexity, and the desired solution properties.</p>","tags":["maze","troubleshooting"]},{"location":"maze/#a-python-code-example","title":"a python code example","text":"<ul> <li>you can run this online at &lt;https://colab.research.google.com/</li> </ul> <pre><code># Define a simple maze\nmaze = [\n    [1, 1, 1, 1, 1, 1, 1],\n    [1, 0, 0, 0, 1, 0, 1],\n    [1, 0, 1, 0, 1, 0, 1],\n    [1, 0, 1, 0, 0, 0, 1],\n    [1, 0, 1, 1, 1, 0, 1],\n    [1, 0, 0, 0, 0, 0, 1],\n    [1, 1, 1, 1, 1, 0, 1]\n]\n\nstart = (1, 1)  # Starting point 'S'\nexit = (5, 5)   # Exit point 'E'\n\ndef print_maze(maze):\n    for row in maze:\n        print(\" \".join(str(cell) for cell in row))\n\ndef is_valid_move(maze, position, visited):\n    x, y = position\n    return (\n        0 &lt;= x &lt; len(maze) and            # Within maze bounds\n        0 &lt;= y &lt; len(maze[0]) and         # Within row bounds\n        maze[x][y] == 0 and               # It's an open path (not a wall)\n        position not in visited           # Not visited yet\n    )\n\ndef find_exit_path(maze, start, exit):\n    # Stack for DFS and set to keep track of visited positions\n    stack = [(start, [start])]\n    visited = set()\n\n    while stack:\n        (x, y), path = stack.pop()\n\n        # If we reach the exit, return the path\n        if (x, y) == exit:\n            return path\n\n        # Mark the current position as visited\n        visited.add((x, y))\n\n        # Explore the four possible directions (up, down, left, right)\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            new_pos = (x + dx, y + dy)\n            if is_valid_move(maze, new_pos, visited):\n                stack.append((new_pos, path + [new_pos]))\n\n    return None  # No path found\n\ndef mark_solution(maze, path):\n    for (x, y) in path:\n        maze[x][y] = 'P'  # Mark the path with 'P'\n\n# Print the original maze\nprint(\"Original Maze:\")\nprint_maze(maze)\n\n# Find the path\npath_to_exit = find_exit_path(maze, start, exit)\n\nif path_to_exit:\n    print(\"\\nPath found:\", path_to_exit)\n    # Mark the path on the maze and print it\n    mark_solution(maze, path_to_exit)\n    print(\"\\nSolved Maze:\")\n    print_maze(maze)\nelse:\n    print(\"\\nNo path found.\")\n</code></pre>","tags":["maze","troubleshooting"]},{"location":"mkdocs/","title":"mkdocs","text":"<ul> <li>serve with alias</li> </ul> <pre><code>alias mks='mkdocs serve'\n</code></pre> <ul> <li>serve with click</li> </ul> <pre><code>cli bujo m\n</code></pre>","tags":["alias","mkdocs","click"]},{"location":"mkdocs/#includes","title":"includes","text":"<ul> <li>embed docs</li> <li>splice in by line numbers <code>example.md:2:5</code></li> </ul> <pre><code>-8&lt;- \"includes/example.md&gt;\n</code></pre>","tags":["alias","mkdocs","click"]},{"location":"mkdocs/#site-wide-glossary","title":"site wide glossary","text":"<ul> <li>mouse over this: PRAJNA</li> <li>add more here: <code>includes/abbreviations.md</code></li> </ul>","tags":["alias","mkdocs","click"]},{"location":"mkdocs/#citation","title":"citation","text":"<pre><code>- this[^1]\n[^1]: requires software installation\n</code></pre>","tags":["alias","mkdocs","click"]},{"location":"mkdocs/#troubleshooting-lightbox","title":"troubleshooting lightbox","text":"<pre><code>pip install mkdocs-glightbox\n</code></pre>","tags":["alias","mkdocs","click"]},{"location":"mobile/","title":"mobile apps","text":""},{"location":"projects/","title":"projects","text":"<ul> <li>I usually start with tasks which sometimes spawn folders</li> <li>folders usually are within the main project folde but sometimes are outside it</li> <li>if the project folder spawned is somewhere else I will add a code block to open it locally</li> <li>example <code>code ~/wherever/</code> or a url or shared network folder or cloud resource</li> <li><code>projects.md</code> is optional for whatever you can use it or delete it</li> <li>usually it's code blocks used for local development</li> <li>an index of scattered information related to the project</li> <li>etc.</li> </ul>"},{"location":"projects/#cucumber-rule-cookiecutter","title":"cucumber rule cookiecutter","text":"<ul> <li>this repo has a cookiecutter for cucumber <code>rule/</code> folders if your tests get bloated</li> </ul> <pre><code>cookiecutter https://github.com/shane0/workflow --directory rule\n</code></pre>"},{"location":"python/","title":"python","text":"<ul> <li>macos: on a new laptop</li> <li>see setup page</li> <li>install homebrew</li> <li>install using pyenv</li> <li>see <code>dotfiles/</code> in this repo for more details</li> </ul>"},{"location":"python/#python-aliases","title":"python aliases","text":"<ul> <li>using venv in a folder</li> <li>http server</li> </ul> <pre><code>alias vvc='python3 -m venv venv'\nalias vv='source venv/bin/activate'\nalias vd='deactivate'\nalias htp='python -m http.server'\n</code></pre>"},{"location":"readability/","title":"readability","text":"<ul> <li>I use a combination of readability tools</li> <li>lexi</li> <li>markdown linters</li> <li>eli5</li> <li>active voice</li> <li>present tense</li> <li>avoid jargon</li> <li>when jargon is unavoidable I use mkdocs abbreviations</li> </ul>"},{"location":"readability/#jargon","title":"jargon","text":"<ul> <li>mkdocs has a site wide glossary</li> <li>example: hover the mouse over: DUKKHA</li> <li>to use it just add your jargon in ALLCAPS</li> <li>add the jargon to: <code>includes/abbreviations.md</code></li> </ul>"},{"location":"readability/#lexi","title":"lexi","text":"<ul> <li>example: https://github.com/shane0/workflow/pull/3</li> <li>add this permission in your reposettings for the lexi action to work</li> <li>repo &gt; settings &gt; actions &gt; general &gt; change <code>Workflow permissions</code> to read/write</li> <li>add this file <code>.github/workflows/readability.yml</code></li> <li>local action</li> </ul>"},{"location":"readability/#lexi-from-command-line","title":"lexi from command line","text":"<pre><code>yarn run:local:report ./test-data/old ./test-data/new\n</code></pre> <ul> <li>action</li> </ul> <pre><code>name: Report readability\n\n# This action only works on pull request events\non: pull_request\n\njobs:\n    report-readability:\n        name: readability\n        runs-on: ubuntu-latest\n        steps:\n            - name: Checkout repo with history\n              uses: actions/checkout@v4\n              with:\n                  fetch-depth: 0\n            - uses: Rebilly/lexi@v2\n              with:\n                  github-token: ${{ secrets.GITHUB_TOKEN }}\n                  glob: 'docs/*md'\n</code></pre> <pre><code>yarn run v1.22.19\n$ tsx ./src/cli/report.ts ./test-data/old ./test-data/new\n\n**Overall readability score:** 0 (\ud83d\udfe2 +0)\n\nFile | Readability\n--- | ---\n[new.md](https://github.com/repo-name/blob/commit-sha/new.md \"new.md\") | 0 (-)\n\n\n&lt;details&gt;\n  &lt;summary&gt;View detailed metrics&lt;/summary&gt;\n\n\ud83d\udfe2 - Shows an _increase_ in readability\n\ud83d\udd34 - Shows a _decrease_ in readability\n\nFile | Readability | FRE | GF | ARI | CLI | DCRS\n--- | --- | --- | --- | --- | --- | ---\n[new.md](https://github.com/repo-name/blob/commit-sha/new.md \"new.md\") | 0 | 0 | 19 | 22 | 19 | 11\n&amp;nbsp; | - | - | - | - | - | -\n\n\nAverages:\n\n&amp;nbsp; | Readability | FRE | GF | ARI | CLI | DCRS\n--- | --- | --- | --- | --- | --- | ---\nAverage | 0 | 0 | 19 | 22 | 19 | 11\n&amp;nbsp; | \ud83d\udfe2 +0 | \ud83d\udfe2 +0 | \ud83d\udfe2 +0 | \ud83d\udfe2 +0 | \ud83d\udfe2 +0 | \ud83d\udfe2 +0\n\n\n&lt;details&gt;\n  &lt;summary&gt;View metric targets&lt;/summary&gt;\n\nMetric | Range | Ideal score\n--- | --- | ---\nFlesch Reading Ease | 100 (very easy read) to 0 (extremely difficult read) | 60\nGunning Fog | 6 (very easy read) to 17 (extremely difficult read) | 8 or less\nAuto. Read. Index | 6 (very easy read) to 14 (extremely difficult read) | 8 or less\nColeman Liau Index | 6 (very easy read) to 17 (extremely difficult read) | 8 or less\nDale-Chall Readability | 4.9 (very easy read) to 9.9 (extremely difficult read) | 6.9 or less\n\n&lt;/details&gt;\n\n&lt;/details&gt;\n\nDone in 0.74s.\n</code></pre>"},{"location":"scripts/","title":"scripts","text":"<ul> <li>when you deploy this template</li> <li>if you create any scripts you might reuse in projects later</li> <li>add them to this template with these update instructions</li> <li>default: <code>~/workflow/{{cookiecutter_folder}}/&lt;example&gt;/</code></li> <li>optional: <code>~/workflow/&lt;example&gt;/</code></li> </ul>","tags":["deployment","update"]},{"location":"scripts/#commands","title":"commands","text":"<ul> <li>prompts <code>y/n</code> so each command is an option</li> </ul> <pre><code>#!/usr/bin/env bash\n\n# pick your options \n\n# failover if you do not want to install cookiecutter\ncommands=(\n    \"echo mkdocs\"\n    \"echo update the port number in the mkdocs and vscode task\"\n    \"mkdocs new .\"\n    \"rm mkdocs.yml\"\n    \"cp ~/template/mkdocs.yml .\"\n    \"&gt; docs/index.md\"\n    \"echo \"[TAGS]\" &gt;&gt; docs/index.md\"\n    \"mkdir docs/images\"\n    \"mkdir includes\"\n    \"mkdir .vscode\"\n    \"cp ~/template/.vscode/mkdocs.json .vscode/\"\n    \"echo todocli\"\n    \"cp ~/template/docs/todocli.md docs/\"\n    \"cp -R ~/template/todocli/ .\"\n    \"echo click\"\n    \"$HOME/template/deploy.sh\"\n    \"echo update upload.sh\"\n)\n\n# Iterate over the list of commands\nfor command in \"${commands[@]}\"; do\n    # Prompt the user if they want to run the command\n    echo \"run '$command'? (y/n)\"\n    read -r -n 1 response\n\n    # If the user says yes, run the command\n    if [[ $response == \"y\" ]]; then\n        echo \"Running '$command'\"\n        eval \"$command\"\n    fi\ndone\n</code></pre>","tags":["deployment","update"]},{"location":"setup/","title":"setup","text":"<ul> <li>this repo has <code>dotfiles/</code> with some setup scripts</li> </ul>"},{"location":"setup/#linux","title":"linux","text":"<ul> <li>if you use linux you are smarter than me and already know how to setup</li> <li>I used to use linux &amp; will return someday</li> </ul>"},{"location":"setup/#macos","title":"macos","text":"<ul> <li>I currently use this on macos &amp; can assist if you get stuck</li> <li>install https://brew.sh/</li> <li>once that is setup you can use it to install git, pyenv + python, etc.</li> </ul>"},{"location":"stack_trace/","title":"stack tracing","text":"","tags":["linux"]},{"location":"style_guide/","title":"style guide","text":"<ul> <li>https://docs.gitlab.com/ee/development/documentation/styleguide/index.html#organize-by-topic-not-by-type</li> <li>present tense</li> <li>active voice</li> <li>avoid -ing</li> <li>content templates https://docs.gitlab.com/ee/development/documentation/topic_types/</li> </ul>"},{"location":"style_guide/#my-arbitrary-preferences","title":"my arbitrary preferences","text":"<ul> <li>life is way too short to waste time on:</li> <li>title case</li> <li>periods</li> <li>numbered lists (use bullets)</li> <li>in step by step instructions never get lazy and refer someone up or downward</li> <li>...</li> </ul>"},{"location":"theory/","title":"theory","text":"<ul> <li>honesty: cut through fear, fix the things people are afraid to talk about</li> <li>transparency: share everything</li> <li>design: make everything as simple as possible. complexity is your #1 enemy</li> <li>design: find the shortest route, focus on x exact edits: folders or files or people, etc.</li> </ul>"},{"location":"todo/","title":"todo cli integration","text":"<ul> <li>my workflow template deployments always include todo cli</li> <li>except I use aliases so it runs from inside any folder</li> <li>tasks are rendered on mkdocs</li> <li>tasks sometimes become a project</li> </ul>","tags":["mkdocs","todo"]},{"location":"todo/#screencast","title":"screencast","text":"","tags":["mkdocs","todo"]},{"location":"todo/#layout","title":"layout","text":"<pre><code>todocli/\n\u251c\u2500\u2500 done.txt\n\u251c\u2500\u2500 report.txt\n\u251c\u2500\u2500 todo.cfg\n\u251c\u2500\u2500 todo.sh\n\u251c\u2500\u2500 todo.txt\n&lt;projects&gt;/ template or whatever\n</code></pre>","tags":["mkdocs","todo"]},{"location":"todo/#todotxt","title":"todo.txt","text":"<pre><code>(A) use this often and keep it updated\n(B) add cors api request example\n(B) test stuff.sh and tune up\n(B) fix the cookiecutter hook on macos\n(B) add vscode snippets\n(A) add cookiecutter variables for mkdocs\n(A) document using gh pages\n(A) cli c commitizen command lines\n(B) add the workflow button to the homepage\n(A) screencast homepage workflow projects tasks click cookiecutter\n(A) fix bujo alias then click\n(A) selenium folder\n(A) cucumber click pick type pick file pick tags or features run manual or auto optional sqlite saves results with timers\n(A) click with choose using lists dicts custom objects folders files scripts universal get shit done\n</code></pre>","tags":["mkdocs","todo"]},{"location":"todo/#donetxt","title":"done.txt","text":"<pre><code>x 2022-06-07 add bujo\nx 2023-09-13 copy from gitlab to github\nx 2023-09-13 setup gh pages\nx 2023-09-14 add lexi for cli tests\nx 2023-09-14 add lexi\nx 2023-09-14 lexi action for cli demo\nx 2023-09-14 setup discussion\nx 2023-09-17 deploy a new buddhism site\nx 2024-10-09 cookiecutter for cucumber rules\nx 2024-12-07 tech lock in\n</code></pre>","tags":["mkdocs","todo"]},{"location":"todo/#alias","title":"alias","text":"","tags":["mkdocs","todo"]},{"location":"todo/#usage","title":"usage","text":"<pre><code>  Usage: todo.sh [-fhpantvV] [-d todo_config] action [task_number] [task_description]\n\n  Actions:\n    add|a \"THING I NEED TO DO +project @context\"\n    addm \"THINGS I NEED TO DO\n          MORE THINGS I NEED TO DO\"\n    addto DEST \"TEXT TO ADD\"\n    append|app ITEM# \"TEXT TO APPEND\"\n    archive\n    command [ACTIONS]\n    deduplicate\n    del|rm ITEM# [TERM]\n    depri|dp ITEM#[, ITEM#, ITEM#, ...]\n    do ITEM#[, ITEM#, ITEM#, ...]\n    help [ACTION...]\n    list|ls [TERM...]\n    listall|lsa [TERM...]\n    listaddons\n    listcon|lsc [TERM...]\n    listfile|lf [SRC [TERM...]]\n    listpri|lsp [PRIORITIES] [TERM...]\n    listproj|lsprj [TERM...]\n    move|mv ITEM# DEST [SRC]\n    prepend|prep ITEM# \"TEXT TO PREPEND\"\n    pri|p ITEM# PRIORITY\n    replace ITEM# \"UPDATED TODO\"\n    report\n    shorthelp\n\n  Actions can be added and overridden using scripts in the actions\n  directory.\n\n  See \"help\" for more details.\n</code></pre>","tags":["mkdocs","todo"]},{"location":"troubleshooting/","title":"troubleshooting template","text":"<ul> <li>gitlab troubleshooting topic</li> </ul> <pre><code>## Troubleshooting\n\nWhen working with &lt;x feature&gt;, you might encounter the following issues.\n\n### The message or a description of it\n\nYou might get an error that states &lt;error message&gt;.\n\nThis issue occurs when...\n\nThe workaround is...\n\n## Error: `unexpected disconnect while reading sideband packet`\n\nUnstable networking conditions can cause Gitaly to fail when trying to fetch large repository\ndata from the primary site. Those conditions can result in this error:\n\n```plaintext\ncurl 18 transfer closed with outstanding read data remaining &amp; fetch-pack:\nunexpected disconnect while reading sideband packet\n```\n\nTo resolve this issue...\n</code></pre>","tags":["troubleshooting"]},{"location":"update/","title":"update the template","text":"<ul> <li>clone locally, update, push</li> </ul> <pre><code>git clone https://shane0.github.io/workflow/ \n</code></pre> <ul> <li>the next time you deploy at the prompt you can choose to download it</li> </ul>","tags":["cookiecutter","update"]},{"location":"workflow/","title":"workflow","text":"<ul> <li>this file is <code>docs/workflow.md</code></li> <li>a workflow file gets you or someone else directly to the exit using the shortest path</li> <li>when interrupted from a project workflow is a partial breadcrumb trail so you can pickup where you were quickly</li> <li>a workflow allows something to move toward automation and eliminates repition</li> <li>what I usually put here is instructions for managing data in this folder itself</li> <li>this is optional use it however you see fit</li> <li>a workflow might involve these other pages</li> <li><code>docs/project.md</code> </li> <li><code>docs/todo.md</code> </li> <li><code>docs/troubleshooting.md</code> </li> <li>if you create a sub project do not put it here - it should have its own <code>workflow.md</code></li> </ul>"},{"location":"workflow/#workflow-for-this-repo","title":"workflow for this repo","text":"<ul> <li>there are two workflows each has a button on the homepage</li> <li>deploying this workflow template</li> <li>updating the template itself which is this repo</li> <li>the actual cookiecutter template is this folder: <code>{{cookiecutter.proj_name}}</code></li> <li>on my laptop I have this cloned so from a terminal i just type</li> </ul> <pre><code>code workflow/\n# make changes and push with\n./push.sh\n# that script directs you in the prompt for the rest\n# that script opens the url to this repo\n</code></pre>"},{"location":"workflow/#optional-stuff-included","title":"optional stuff included","text":"<ul> <li>this template includes a few pages that are optional</li> <li>tasks</li> <li>project folders</li> <li> <p>click automations</p> </li> <li> <p>later if you return to a project you should be able to read this workflow page and pick up where you left off on your project</p> </li> <li>what the purpose of this folder is to begin with</li> <li>what file you were creating or updating</li> <li>where it is at on your computer or the cloud etc.</li> <li>this page is optional if you are on a simple task or project just use todo</li> <li>sometimes you end up in your own or someone's elses mess</li> </ul> <pre><code>graph TD\nworkflow --&gt; deployment\nworkflow --&gt; apps \napps -- tiny command line automation --&gt; aliases\ndeployment --&gt; sub_projects  --&gt; apps\napps -- simple command line task management --&gt; todocli\napps -- larger command line automation --&gt; click_</code></pre> <pre><code>index.md\n\n# optional\ntodo.md\nprojects.md\nworkflow.md\n\n# automations\nclick.md\nutils/bash_aliases\n</code></pre>"},{"location":"bujo/09_September/","title":"09 Sep 2024","text":"<ul> <li>setting up a new laptop</li> <li>updating docs as I go</li> <li>added <code>dotfiles/</code> and some setup notes</li> <li>reason: my son wanted me to try no mans sky </li> <li>this required a faster laptop so I'm on a new m3 mac air</li> <li>much faster wish I upgraded earlier</li> <li>it's smaller and lighter + 15\" </li> </ul>"},{"location":"bujo/2023/","title":"2023","text":"<ul> <li>meditation class level 1 - 20 weeks</li> <li>strength training &amp; prep for hiking trips</li> <li>music composition</li> <li>updating previous apps: wordpress, tw, django</li> </ul>"},{"location":"bujo/2023/#9-sep-2023","title":"9 sep 2023","text":"<ul> <li>test this on buddhism/ &amp; cheatsheets/</li> <li>updating gh pages docs</li> </ul>"},{"location":"bujo/2023/#radoms","title":"radoms","text":"<ul> <li>try this: https://github.com/Musilix/Mymyc</li> </ul>"},{"location":"","title":"Home","text":"<p>workflow/ is a folder fulll of the best tools</p> <p>Workflow is a folder of reusable tools, including command line automation, task tracking, and online or offline collaboration features, designed to streamline personal or professional projects, keep things organized, and leave a clear trail for others to follow.</p>"},{"location":"#screencast","title":"screencast","text":""},{"location":"#workflow-template","title":"workflow template","text":"<p>get setup deploy this template update this template</p> <p>first principles workflow projects cucumber cookiecutter tasks bujo</p> <p>sites</p> <p>home buddhism cheatsheets retro games</p>"},{"location":"#alias","title":"alias","text":"<ul> <li>alias shortcuts</li> <li>mkdocs</li> </ul>"},{"location":"#click","title":"click","text":"<ul> <li>alias shortcuts</li> <li>click</li> <li>mkdocs</li> </ul>"},{"location":"#cookiecutter","title":"cookiecutter","text":"<ul> <li>behave (cucumber tests)</li> <li>cookiecutter</li> <li>deployment</li> <li>update the template</li> </ul>"},{"location":"#cucumber","title":"cucumber","text":"<ul> <li>behave (cucumber tests)</li> </ul>"},{"location":"#deployment","title":"deployment","text":"<ul> <li>scripts</li> </ul>"},{"location":"#deployments","title":"deployments","text":"<ul> <li>deployment</li> </ul>"},{"location":"#glossary","title":"glossary","text":"<ul> <li>glossary</li> </ul>"},{"location":"#linux","title":"linux","text":"<ul> <li>stack tracing</li> </ul>"},{"location":"#maze","title":"maze","text":"<ul> <li>maze</li> </ul>"},{"location":"#mkdocs","title":"mkdocs","text":"<ul> <li>mkdocs</li> <li>todo cli integration</li> </ul>"},{"location":"#python","title":"python","text":"<ul> <li>behave (cucumber tests)</li> </ul>"},{"location":"#test","title":"test","text":"<ul> <li>behave (cucumber tests)</li> </ul>"},{"location":"#todo","title":"todo","text":"<ul> <li>todo cli integration</li> </ul>"},{"location":"#troubleshooting","title":"troubleshooting","text":"<ul> <li>maze</li> <li>troubleshooting template</li> </ul>"},{"location":"#update","title":"update","text":"<ul> <li>click</li> <li>scripts</li> <li>update the template</li> </ul>"},{"location":"#workflow","title":"workflow","text":"<ul> <li>file structure</li> </ul>"}]}