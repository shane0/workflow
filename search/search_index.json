{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"workflow template","text":"<p>deploy this template update this template</p> <ul> <li>layout</li> </ul> <pre><code>tree -d -L 1\n</code></pre> <pre><code>\u251c\u2500\u2500 docs &lt;-- mkdocs\n\u251c\u2500\u2500 includes &lt;-- snippets &amp; gloassary (mkdocs in the browser)\n\u251c\u2500\u2500 plugins &lt; command line automations\n\u2514\u2500\u2500 todocli &lt;-- task management files (works in command line and can be viewed in mkdocs)\n</code></pre> <ul> <li>options not installed by default</li> </ul> <pre><code>more click plugins\ndocs readability measurement locally or remote on push and pull requests (lexi)\nmarkdownlint in editor, command line or remote pipelines\ngithub integrations for repos, actions and pages\nlocal or remote tests (includes examples in cucumber, python &amp; js)\nmore aliases and shell scripts\n</code></pre>"},{"location":"#alias","title":"alias","text":"<ul> <li>alias shortcuts</li> <li>mkdocs</li> </ul>"},{"location":"#click","title":"click","text":"<ul> <li>alias shortcuts</li> <li>mkdocs</li> </ul>"},{"location":"#cookiecutter","title":"cookiecutter","text":"<ul> <li>cookiecutter</li> <li>deploy</li> <li>update the template</li> </ul>"},{"location":"#cucumber","title":"cucumber","text":"<ul> <li>behave (cucumber tests)</li> </ul>"},{"location":"#mkdocs","title":"mkdocs","text":"<ul> <li>mkdocs</li> <li>todo cli integration</li> </ul>"},{"location":"#python","title":"python","text":"<ul> <li>behave (cucumber tests)</li> </ul>"},{"location":"#test","title":"test","text":"<ul> <li>behave (cucumber tests)</li> </ul>"},{"location":"#todo","title":"todo","text":"<ul> <li>todo cli integration</li> </ul>"},{"location":"about/","title":"about","text":"<p>Info<ul> <li>a no nonsense workflow centered on the power of simplicity &amp; ease of maintanence</li> <li>using parts from:</li> <li>git</li> <li>linux standards</li> <li>data science template</li> <li>readme (docs first) driven development</li> <li>behavior (tests first) sdriven</li> <li>gitlab style guide</li> <li>https://www.writethedocs.org</li> </ul> </p> <p>Example<ul> <li>project templates: cookiecutter</li> <li>task tracking: todocli</li> <li>modular command line automation: click</li> <li>powerful documentaiton: mkdocs</li> <li>measurable readability: lexi</li> </ul> </p>"},{"location":"alias/","title":"alias shortcuts","text":"<ul> <li>apps in this template have aliases documented on their mkdoc page</li> <li>click commands I add typically call an alias so they click is optional </li> </ul>","tags":["alias","click"]},{"location":"alias/#alias-workflow","title":"alias workflow","text":"<ul> <li>this seems obvious I'm surprised it's not included in .bashrc from day 1</li> <li>ea: edit alias file</li> <li>sa: updates aliases (sa = source alias)</li> </ul> <pre><code>#set -o vi\nalias ea='vim ~/.bash_aliases'\nalias sa='source ~/.bashrc'\n</code></pre> <ul> <li>when editing aliases use: https://www.shellcheck.net/</li> </ul>","tags":["alias","click"]},{"location":"behave/","title":"behave (cucumber tests)","text":"","tags":["test","cucumber","python"]},{"location":"behave/#gherkin-file","title":"gherkin file","text":"<ul> <li><code>features/file.feature</code></li> </ul> <pre><code>Feature: Verify log files\n    As a developer\n    I want to ensure the logs contain specific content\n    So that I can confirm the application is running correctly\nScenario Outline: Check log file &lt;filename&gt; for &lt;content&gt;\n        Given I have a log file named \"&lt;filename&gt;\"\nWhen I check the file for \"&lt;content&gt;\"\nThen the file should contain \"&lt;content&gt;\"\nExamples:\n            | filename | content            |\n            | file1    | expected content 1 |\n            | file2    | expected content 2 |\n</code></pre>","tags":["test","cucumber","python"]},{"location":"behave/#locally","title":"locally","text":"<pre><code>behave\n</code></pre> <pre><code>Feature: Verify log files # features/file.feature:1\nAs a developer\n  I want to ensure the logs contain specific content\n  So that I can confirm the application is running correctly\n  Scenario Outline: Check log file file1 for expected content 1 -- @1.1   # features/file.feature:13\nGiven I have a log file named \"file1\"                                 # features/steps/file_steps.py:8\nWhen I check the file for \"expected content 1\"                        # features/steps/file_steps.py:13\nThen the file should contain \"expected content 1\"                     # features/steps/file_steps.py:19\nScenario Outline: Check log file file2 for expected content 2 -- @1.2   # features/file.feature:14\nGiven I have a log file named \"file2\"                                 # features/steps/file_steps.py:8\nWhen I check the file for \"expected content 2\"                        # features/steps/file_steps.py:13\nThen the file should contain \"expected content 2\"                     # features/steps/file_steps.py:19\n1 feature passed, 0 failed, 0 skipped\n2 scenarios passed, 0 failed, 0 skipped\n6 steps passed, 0 failed, 0 skipped, 0 undefined\nTook 0m0.002s\n</code></pre>","tags":["test","cucumber","python"]},{"location":"behave/#remotely","title":"remotely","text":"<ul> <li><code>.github/behave.yml</code></li> </ul> <pre><code>name: Run tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Setup Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.x'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n    - name: Run tests\n      env:\n        SKIP_TESTS: ${{ env.SKIP_TESTS }}\n      run: |\n        if [ -z \"$SKIP_TESTS\" ]; then\n          behave features/file.feature\n          # behave -c 1\n        else\n          echo \"Tests skipped due to SKIP_TESTS environment variable.\"\n        fi\n</code></pre>","tags":["test","cucumber","python"]},{"location":"cli/","title":"command line tools","text":""},{"location":"cli/#fuzzy-find","title":"fuzzy find","text":"<pre><code>cd\nfzf\n# start typing and magic happens\n</code></pre> <pre><code># fuzzy find then open\nalias v='vi $(fzf)'\n</code></pre>"},{"location":"click/","title":"click","text":"<ul> <li>click</li> <li>add your own plugins</li> <li>use this example: <code>plugings/bujo.py</code></li> </ul> <pre><code>Usage: cli.py bujo [OPTIONS] COMMAND [ARGS]...\n\nbullet journaling &amp; todocli\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  day        week\n  dayfolder  create subfolder with named todays date\n  edit       edit plugin\n  folder     create bujo folder\n  future     bujo index file\n  index      bujo index file\n  m          mkdocs serve\n  month      month file\n  read       read a bujo/ file\n  remote     jobs on remotive\n  s          start dev server\n  snip       open snippet maker\n  todo       generic todo\n  week       week\n  ww         weather\n  year       week\n  zl         markdownlint\n</code></pre>"},{"location":"cookiecutter/","title":"cookiecutter","text":"<ul> <li>cookiecutter</li> </ul> <pre><code>{\n\"proj_name\": \"project name\",\n\"release_date\": \"{% now 'local' %}\",\n\"version\": \"0.1.0\",\n\"_extensions\": [\"jinja2_time.TimeExtension\"]\n}\n</code></pre>","tags":["cookiecutter"]},{"location":"deploy/","title":"deploy","text":"<ul> <li>not all files are included</li> <li>find more options here: https://github.com/shane0/workflow </li> </ul>","tags":["cookiecutter"]},{"location":"deploy/#first-time","title":"first time","text":"<ul> <li> <p>on a new machine</p> </li> <li> <p>install cookiecutter</p> </li> <li>deploy this cookiecutter the first time1</li> </ul> <pre><code>cookiecutter  https://shane0.github.io/workflow/  </code></pre>","tags":["cookiecutter"]},{"location":"deploy/#after-that","title":"after that","text":"<ul> <li>just use the name</li> </ul> <pre><code>cookiecutter workflow </code></pre> <ol> <li> <p>note: by default cookiecutter  saves a copy of this template in  <code>~/.cookiecutters/workflow/</code> the first time you use\u00a0\u21a9</p> </li> </ol>","tags":["cookiecutter"]},{"location":"mkdocs/","title":"mkdocs","text":"<ul> <li>serve with alias</li> </ul> <pre><code>alias mks='mkdocs serve'\n</code></pre> <ul> <li>serve with click</li> </ul> <pre><code>cli bujo m\n</code></pre>","tags":["alias","mkdocs","click"]},{"location":"mkdocs/#includes","title":"includes","text":"<ul> <li>embed docs</li> <li>splice in by line numbers <code>example.md:2:5</code></li> </ul> <pre><code>-8&lt;- \"includes/example.md&gt;\n</code></pre>","tags":["alias","mkdocs","click"]},{"location":"mkdocs/#site-wide-glossary","title":"site wide glossary","text":"<ul> <li>mouse over this: PRAJNA</li> <li>add more here: <code>includes/abbreviations.md</code></li> </ul>","tags":["alias","mkdocs","click"]},{"location":"readability/","title":"readability","text":"<ul> <li>I use a combination of readability tools</li> <li>lexi</li> <li>markdown linters</li> <li>eli5</li> <li>active voice</li> <li>present tense</li> <li>avoid jargon</li> <li>when jargon is unavoidable I use mkdocs abbreviations</li> </ul>"},{"location":"readability/#jargon","title":"jargon","text":"<ul> <li>mkdocs has a site wide glossary</li> <li>example: hover the mouse over: DUKKHA</li> <li>to use it just add your jargon in ALLCAPS</li> <li>add the jargon to: <code>includes/abbreviations.md</code></li> </ul>"},{"location":"readability/#lexi","title":"lexi","text":"<ul> <li>example: https://github.com/shane0/workflow/pull/3</li> <li>add this permission in your reposettings for the lexi action to work</li> <li>repo &gt; settings &gt; actions &gt; general &gt; change <code>Workflow permissions</code> to read/write</li> <li>add this file <code>.github/workflows/readability.yml</code></li> <li>local action</li> </ul>"},{"location":"readability/#lexi-from-command-line","title":"lexi from command line","text":"<pre><code>yarn run:local:report ./test-data/old ./test-data/new\n</code></pre> <ul> <li>action</li> </ul> <pre><code>name: Report readability\n# This action only works on pull request events\non: pull_request\njobs:\nreport-readability:\nname: readability\nruns-on: ubuntu-latest\nsteps:\n- name: Checkout repo with history\nuses: actions/checkout@v4\nwith:\nfetch-depth: 0\n- uses: Rebilly/lexi@v2\nwith:\ngithub-token: ${{ secrets.GITHUB_TOKEN }}\nglob: 'docs/*md'\n</code></pre> <pre><code>yarn run v1.22.19\n$ tsx ./src/cli/report.ts ./test-data/old ./test-data/new\n\n**Overall readability score:** 0 (\ud83d\udfe2 +0)\nFile | Readability\n--- | ---\n[new.md](https://github.com/repo-name/blob/commit-sha/new.md \"new.md\") | 0 (-)\n&lt;details&gt;\n  &lt;summary&gt;View detailed metrics&lt;/summary&gt;\n\n\ud83d\udfe2 - Shows an _increase_ in readability\n\ud83d\udd34 - Shows a _decrease_ in readability\n\nFile | Readability | FRE | GF | ARI | CLI | DCRS\n--- | --- | --- | --- | --- | --- | ---\n[new.md](https://github.com/repo-name/blob/commit-sha/new.md \"new.md\") | 0 | 0 | 19 | 22 | 19 | 11\n&amp;nbsp; | - | - | - | - | - | -\n\nAverages:\n\n&amp;nbsp; | Readability | FRE | GF | ARI | CLI | DCRS\n--- | --- | --- | --- | --- | --- | ---\nAverage | 0 | 0 | 19 | 22 | 19 | 11\n&amp;nbsp; | \ud83d\udfe2 +0 | \ud83d\udfe2 +0 | \ud83d\udfe2 +0 | \ud83d\udfe2 +0 | \ud83d\udfe2 +0 | \ud83d\udfe2 +0\n\n&lt;details&gt;\n  &lt;summary&gt;View metric targets&lt;/summary&gt;\n\nMetric | Range | Ideal score\n--- | --- | ---\nFlesch Reading Ease | 100 (very easy read) to 0 (extremely difficult read) | 60\nGunning Fog | 6 (very easy read) to 17 (extremely difficult read) | 8 or less\nAuto. Read. Index | 6 (very easy read) to 14 (extremely difficult read) | 8 or less\nColeman Liau Index | 6 (very easy read) to 17 (extremely difficult read) | 8 or less\nDale-Chall Readability | 4.9 (very easy read) to 9.9 (extremely difficult read) | 6.9 or less\n\n&lt;/details&gt;\n\n&lt;/details&gt;\n\nDone in 0.74s.\n</code></pre>"},{"location":"screencast/","title":"screencast","text":""},{"location":"style_guide/","title":"style guide","text":"<ul> <li>https://docs.gitlab.com/ee/development/documentation/styleguide/index.html#organize-by-topic-not-by-type</li> <li>present tense</li> <li>active voice</li> <li>avoid -ing</li> <li>content templates https://docs.gitlab.com/ee/development/documentation/topic_types/</li> </ul>"},{"location":"todo/","title":"todo cli integration","text":"<ul> <li>this uses mkdocs snippets to integrate todocli</li> </ul>","tags":["mkdocs","todo"]},{"location":"todo/#todotxt","title":"todo.txt","text":"<pre><code>(A) use this often and keep it updated\n(A) setup discussion\n(A) add cors api request example\n</code></pre>","tags":["mkdocs","todo"]},{"location":"todo/#donetxt","title":"done.txt","text":"<pre><code>x 2022-06-07 add bujo\nx 2023-09-13 copy from gitlab to github\nx 2023-09-13 setup gh pages\nx 2023-09-14 add lexi for cli tests\nx 2023-09-14 add lexi\nx 2023-09-14 lexi action for cli demo\n</code></pre> <ul> <li>todo cli repo</li> </ul>","tags":["mkdocs","todo"]},{"location":"todo/#alias","title":"alias","text":"","tags":["mkdocs","todo"]},{"location":"update/","title":"update the template","text":"<ul> <li>clone locally, update, push</li> </ul> <pre><code>git clone https://shane0.github.io/workflow/ </code></pre> <ul> <li>the next time you deploy at the prompt you can choose to download it</li> </ul>","tags":["cookiecutter"]},{"location":"bujo/2023/","title":"2023","text":"<ul> <li>copied this cookiecutter over from gitlab &amp; made some updates</li> <li> try this out and keep it updated</li> </ul>"},{"location":"","title":"workflow template","text":"<p>deploy this template update this template</p> <ul> <li>layout</li> </ul> <pre><code>tree -d -L 1\n</code></pre> <pre><code>\u251c\u2500\u2500 docs &lt;-- mkdocs\n\u251c\u2500\u2500 includes &lt;-- snippets &amp; gloassary (mkdocs in the browser)\n\u251c\u2500\u2500 plugins &lt; command line automations\n\u2514\u2500\u2500 todocli &lt;-- task management files (works in command line and can be viewed in mkdocs)\n</code></pre> <ul> <li>options not installed by default</li> </ul> <pre><code>more click plugins\ndocs readability measurement locally or remote on push and pull requests (lexi)\nmarkdownlint in editor, command line or remote pipelines\ngithub integrations for repos, actions and pages\nlocal or remote tests (includes examples in cucumber, python &amp; js)\nmore aliases and shell scripts\n</code></pre>"},{"location":"#alias","title":"alias","text":"<ul> <li>alias shortcuts</li> <li>mkdocs</li> </ul>"},{"location":"#click","title":"click","text":"<ul> <li>alias shortcuts</li> <li>mkdocs</li> </ul>"},{"location":"#cookiecutter","title":"cookiecutter","text":"<ul> <li>cookiecutter</li> <li>deploy</li> <li>update the template</li> </ul>"},{"location":"#cucumber","title":"cucumber","text":"<ul> <li>behave (cucumber tests)</li> </ul>"},{"location":"#mkdocs","title":"mkdocs","text":"<ul> <li>mkdocs</li> <li>todo cli integration</li> </ul>"},{"location":"#python","title":"python","text":"<ul> <li>behave (cucumber tests)</li> </ul>"},{"location":"#test","title":"test","text":"<ul> <li>behave (cucumber tests)</li> </ul>"},{"location":"#todo","title":"todo","text":"<ul> <li>todo cli integration</li> </ul>"}]}